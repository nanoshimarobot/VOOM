// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osmap_2eproto;
class SerializedBBox2;
struct SerializedBBox2DefaultTypeInternal;
extern SerializedBBox2DefaultTypeInternal _SerializedBBox2_default_instance_;
class SerializedDescriptor;
struct SerializedDescriptorDefaultTypeInternal;
extern SerializedDescriptorDefaultTypeInternal _SerializedDescriptor_default_instance_;
class SerializedEllipsoid;
struct SerializedEllipsoidDefaultTypeInternal;
extern SerializedEllipsoidDefaultTypeInternal _SerializedEllipsoid_default_instance_;
class SerializedFeature;
struct SerializedFeatureDefaultTypeInternal;
extern SerializedFeatureDefaultTypeInternal _SerializedFeature_default_instance_;
class SerializedGraph;
struct SerializedGraphDefaultTypeInternal;
extern SerializedGraphDefaultTypeInternal _SerializedGraph_default_instance_;
class SerializedGraphArray;
struct SerializedGraphArrayDefaultTypeInternal;
extern SerializedGraphArrayDefaultTypeInternal _SerializedGraphArray_default_instance_;
class SerializedK;
struct SerializedKDefaultTypeInternal;
extern SerializedKDefaultTypeInternal _SerializedK_default_instance_;
class SerializedKArray;
struct SerializedKArrayDefaultTypeInternal;
extern SerializedKArrayDefaultTypeInternal _SerializedKArray_default_instance_;
class SerializedKeyframe;
struct SerializedKeyframeDefaultTypeInternal;
extern SerializedKeyframeDefaultTypeInternal _SerializedKeyframe_default_instance_;
class SerializedKeyframeArray;
struct SerializedKeyframeArrayDefaultTypeInternal;
extern SerializedKeyframeArrayDefaultTypeInternal _SerializedKeyframeArray_default_instance_;
class SerializedKeyframeFeatures;
struct SerializedKeyframeFeaturesDefaultTypeInternal;
extern SerializedKeyframeFeaturesDefaultTypeInternal _SerializedKeyframeFeatures_default_instance_;
class SerializedKeyframeFeaturesArray;
struct SerializedKeyframeFeaturesArrayDefaultTypeInternal;
extern SerializedKeyframeFeaturesArrayDefaultTypeInternal _SerializedKeyframeFeaturesArray_default_instance_;
class SerializedKeypoint;
struct SerializedKeypointDefaultTypeInternal;
extern SerializedKeypointDefaultTypeInternal _SerializedKeypoint_default_instance_;
class SerializedMappoint;
struct SerializedMappointDefaultTypeInternal;
extern SerializedMappointDefaultTypeInternal _SerializedMappoint_default_instance_;
class SerializedMappointArray;
struct SerializedMappointArrayDefaultTypeInternal;
extern SerializedMappointArrayDefaultTypeInternal _SerializedMappointArray_default_instance_;
class SerializedNode;
struct SerializedNodeDefaultTypeInternal;
extern SerializedNodeDefaultTypeInternal _SerializedNode_default_instance_;
class SerializedObject;
struct SerializedObjectDefaultTypeInternal;
extern SerializedObjectDefaultTypeInternal _SerializedObject_default_instance_;
class SerializedObjectArray;
struct SerializedObjectArrayDefaultTypeInternal;
extern SerializedObjectArrayDefaultTypeInternal _SerializedObjectArray_default_instance_;
class SerializedObjectTrack;
struct SerializedObjectTrackDefaultTypeInternal;
extern SerializedObjectTrackDefaultTypeInternal _SerializedObjectTrack_default_instance_;
class SerializedObjectTrackArray;
struct SerializedObjectTrackArrayDefaultTypeInternal;
extern SerializedObjectTrackArrayDefaultTypeInternal _SerializedObjectTrackArray_default_instance_;
class SerializedPose;
struct SerializedPoseDefaultTypeInternal;
extern SerializedPoseDefaultTypeInternal _SerializedPose_default_instance_;
class SerializedPosition;
struct SerializedPositionDefaultTypeInternal;
extern SerializedPositionDefaultTypeInternal _SerializedPosition_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SerializedBBox2* Arena::CreateMaybeMessage<::SerializedBBox2>(Arena*);
template<> ::SerializedDescriptor* Arena::CreateMaybeMessage<::SerializedDescriptor>(Arena*);
template<> ::SerializedEllipsoid* Arena::CreateMaybeMessage<::SerializedEllipsoid>(Arena*);
template<> ::SerializedFeature* Arena::CreateMaybeMessage<::SerializedFeature>(Arena*);
template<> ::SerializedGraph* Arena::CreateMaybeMessage<::SerializedGraph>(Arena*);
template<> ::SerializedGraphArray* Arena::CreateMaybeMessage<::SerializedGraphArray>(Arena*);
template<> ::SerializedK* Arena::CreateMaybeMessage<::SerializedK>(Arena*);
template<> ::SerializedKArray* Arena::CreateMaybeMessage<::SerializedKArray>(Arena*);
template<> ::SerializedKeyframe* Arena::CreateMaybeMessage<::SerializedKeyframe>(Arena*);
template<> ::SerializedKeyframeArray* Arena::CreateMaybeMessage<::SerializedKeyframeArray>(Arena*);
template<> ::SerializedKeyframeFeatures* Arena::CreateMaybeMessage<::SerializedKeyframeFeatures>(Arena*);
template<> ::SerializedKeyframeFeaturesArray* Arena::CreateMaybeMessage<::SerializedKeyframeFeaturesArray>(Arena*);
template<> ::SerializedKeypoint* Arena::CreateMaybeMessage<::SerializedKeypoint>(Arena*);
template<> ::SerializedMappoint* Arena::CreateMaybeMessage<::SerializedMappoint>(Arena*);
template<> ::SerializedMappointArray* Arena::CreateMaybeMessage<::SerializedMappointArray>(Arena*);
template<> ::SerializedNode* Arena::CreateMaybeMessage<::SerializedNode>(Arena*);
template<> ::SerializedObject* Arena::CreateMaybeMessage<::SerializedObject>(Arena*);
template<> ::SerializedObjectArray* Arena::CreateMaybeMessage<::SerializedObjectArray>(Arena*);
template<> ::SerializedObjectTrack* Arena::CreateMaybeMessage<::SerializedObjectTrack>(Arena*);
template<> ::SerializedObjectTrackArray* Arena::CreateMaybeMessage<::SerializedObjectTrackArray>(Arena*);
template<> ::SerializedPose* Arena::CreateMaybeMessage<::SerializedPose>(Arena*);
template<> ::SerializedPosition* Arena::CreateMaybeMessage<::SerializedPosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SerializedDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedDescriptor) */ {
 public:
  inline SerializedDescriptor() : SerializedDescriptor(nullptr) {}
  ~SerializedDescriptor() override;
  explicit PROTOBUF_CONSTEXPR SerializedDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedDescriptor(const SerializedDescriptor& from);
  SerializedDescriptor(SerializedDescriptor&& from) noexcept
    : SerializedDescriptor() {
    *this = ::std::move(from);
  }

  inline SerializedDescriptor& operator=(const SerializedDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedDescriptor& operator=(SerializedDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedDescriptor* internal_default_instance() {
    return reinterpret_cast<const SerializedDescriptor*>(
               &_SerializedDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedDescriptor& a, SerializedDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedDescriptor& from) {
    SerializedDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedDescriptor";
  }
  protected:
  explicit SerializedDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // repeated fixed32 block = 1;
  int block_size() const;
  private:
  int _internal_block_size() const;
  public:
  void clear_block();
  private:
  uint32_t _internal_block(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_block() const;
  void _internal_add_block(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_block();
  public:
  uint32_t block(int index) const;
  void set_block(int index, uint32_t value);
  void add_block(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      block() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_block();

  // @@protoc_insertion_point(class_scope:SerializedDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedPose) */ {
 public:
  inline SerializedPose() : SerializedPose(nullptr) {}
  ~SerializedPose() override;
  explicit PROTOBUF_CONSTEXPR SerializedPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedPose(const SerializedPose& from);
  SerializedPose(SerializedPose&& from) noexcept
    : SerializedPose() {
    *this = ::std::move(from);
  }

  inline SerializedPose& operator=(const SerializedPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedPose& operator=(SerializedPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedPose* internal_default_instance() {
    return reinterpret_cast<const SerializedPose*>(
               &_SerializedPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedPose& a, SerializedPose& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedPose& from) {
    SerializedPose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedPose";
  }
  protected:
  explicit SerializedPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated float element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  float _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_element() const;
  void _internal_add_element(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_element();
  public:
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:SerializedPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedPosition) */ {
 public:
  inline SerializedPosition() : SerializedPosition(nullptr) {}
  ~SerializedPosition() override;
  explicit PROTOBUF_CONSTEXPR SerializedPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedPosition(const SerializedPosition& from);
  SerializedPosition(SerializedPosition&& from) noexcept
    : SerializedPosition() {
    *this = ::std::move(from);
  }

  inline SerializedPosition& operator=(const SerializedPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedPosition& operator=(SerializedPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedPosition* internal_default_instance() {
    return reinterpret_cast<const SerializedPosition*>(
               &_SerializedPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedPosition& a, SerializedPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedPosition& from) {
    SerializedPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedPosition";
  }
  protected:
  explicit SerializedPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeypoint) */ {
 public:
  inline SerializedKeypoint() : SerializedKeypoint(nullptr) {}
  ~SerializedKeypoint() override;
  explicit PROTOBUF_CONSTEXPR SerializedKeypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeypoint(const SerializedKeypoint& from);
  SerializedKeypoint(SerializedKeypoint&& from) noexcept
    : SerializedKeypoint() {
    *this = ::std::move(from);
  }

  inline SerializedKeypoint& operator=(const SerializedKeypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeypoint& operator=(SerializedKeypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeypoint* internal_default_instance() {
    return reinterpret_cast<const SerializedKeypoint*>(
               &_SerializedKeypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedKeypoint& a, SerializedKeypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKeypoint& from) {
    SerializedKeypoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeypoint";
  }
  protected:
  explicit SerializedKeypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtxFieldNumber = 1,
    kPtyFieldNumber = 2,
    kAngleFieldNumber = 3,
    kOctaveFieldNumber = 4,
  };
  // float ptx = 1;
  void clear_ptx();
  float ptx() const;
  void set_ptx(float value);
  private:
  float _internal_ptx() const;
  void _internal_set_ptx(float value);
  public:

  // float pty = 2;
  void clear_pty();
  float pty() const;
  void set_pty(float value);
  private:
  float _internal_pty() const;
  void _internal_set_pty(float value);
  public:

  // float angle = 3;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // float octave = 4;
  void clear_octave();
  float octave() const;
  void set_octave(float value);
  private:
  float _internal_octave() const;
  void _internal_set_octave(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float ptx_;
    float pty_;
    float angle_;
    float octave_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedK) */ {
 public:
  inline SerializedK() : SerializedK(nullptr) {}
  ~SerializedK() override;
  explicit PROTOBUF_CONSTEXPR SerializedK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedK(const SerializedK& from);
  SerializedK(SerializedK&& from) noexcept
    : SerializedK() {
    *this = ::std::move(from);
  }

  inline SerializedK& operator=(const SerializedK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedK& operator=(SerializedK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedK& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedK* internal_default_instance() {
    return reinterpret_cast<const SerializedK*>(
               &_SerializedK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SerializedK& a, SerializedK& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedK& from) {
    SerializedK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedK";
  }
  protected:
  explicit SerializedK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kCxFieldNumber = 3,
    kCyFieldNumber = 4,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fy = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float cx = 3;
  void clear_cx();
  float cx() const;
  void set_cx(float value);
  private:
  float _internal_cx() const;
  void _internal_set_cx(float value);
  public:

  // float cy = 4;
  void clear_cy();
  float cy() const;
  void set_cy(float value);
  private:
  float _internal_cy() const;
  void _internal_set_cy(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float fx_;
    float fy_;
    float cx_;
    float cy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKArray) */ {
 public:
  inline SerializedKArray() : SerializedKArray(nullptr) {}
  ~SerializedKArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedKArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKArray(const SerializedKArray& from);
  SerializedKArray(SerializedKArray&& from) noexcept
    : SerializedKArray() {
    *this = ::std::move(from);
  }

  inline SerializedKArray& operator=(const SerializedKArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKArray& operator=(SerializedKArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKArray*>(
               &_SerializedKArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SerializedKArray& a, SerializedKArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKArray& from) {
    SerializedKArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKArray";
  }
  protected:
  explicit SerializedKArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKFieldNumber = 1,
  };
  // repeated .SerializedK k = 1;
  int k_size() const;
  private:
  int _internal_k_size() const;
  public:
  void clear_k();
  ::SerializedK* mutable_k(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >*
      mutable_k();
  private:
  const ::SerializedK& _internal_k(int index) const;
  ::SerializedK* _internal_add_k();
  public:
  const ::SerializedK& k(int index) const;
  ::SerializedK* add_k();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >&
      k() const;

  // @@protoc_insertion_point(class_scope:SerializedKArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK > k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedEllipsoid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedEllipsoid) */ {
 public:
  inline SerializedEllipsoid() : SerializedEllipsoid(nullptr) {}
  ~SerializedEllipsoid() override;
  explicit PROTOBUF_CONSTEXPR SerializedEllipsoid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedEllipsoid(const SerializedEllipsoid& from);
  SerializedEllipsoid(SerializedEllipsoid&& from) noexcept
    : SerializedEllipsoid() {
    *this = ::std::move(from);
  }

  inline SerializedEllipsoid& operator=(const SerializedEllipsoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedEllipsoid& operator=(SerializedEllipsoid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedEllipsoid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedEllipsoid* internal_default_instance() {
    return reinterpret_cast<const SerializedEllipsoid*>(
               &_SerializedEllipsoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SerializedEllipsoid& a, SerializedEllipsoid& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedEllipsoid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedEllipsoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedEllipsoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedEllipsoid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedEllipsoid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedEllipsoid& from) {
    SerializedEllipsoid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedEllipsoid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedEllipsoid";
  }
  protected:
  explicit SerializedEllipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated float element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  private:
  float _internal_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_element() const;
  void _internal_add_element(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_element();
  public:
  float element(int index) const;
  void set_element(int index, float value);
  void add_element(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:SerializedEllipsoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > element_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedMappoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedMappoint) */ {
 public:
  inline SerializedMappoint() : SerializedMappoint(nullptr) {}
  ~SerializedMappoint() override;
  explicit PROTOBUF_CONSTEXPR SerializedMappoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedMappoint(const SerializedMappoint& from);
  SerializedMappoint(SerializedMappoint&& from) noexcept
    : SerializedMappoint() {
    *this = ::std::move(from);
  }

  inline SerializedMappoint& operator=(const SerializedMappoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedMappoint& operator=(SerializedMappoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedMappoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedMappoint* internal_default_instance() {
    return reinterpret_cast<const SerializedMappoint*>(
               &_SerializedMappoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SerializedMappoint& a, SerializedMappoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedMappoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedMappoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedMappoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedMappoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedMappoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedMappoint& from) {
    SerializedMappoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedMappoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedMappoint";
  }
  protected:
  explicit SerializedMappoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kBriefdescriptorFieldNumber = 5,
    kIdFieldNumber = 1,
    kVisibleFieldNumber = 3,
    kFoundFieldNumber = 4,
  };
  // .SerializedPosition position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::SerializedPosition& position() const;
  PROTOBUF_NODISCARD ::SerializedPosition* release_position();
  ::SerializedPosition* mutable_position();
  void set_allocated_position(::SerializedPosition* position);
  private:
  const ::SerializedPosition& _internal_position() const;
  ::SerializedPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::SerializedPosition* position);
  ::SerializedPosition* unsafe_arena_release_position();

  // .SerializedDescriptor briefdescriptor = 5;
  bool has_briefdescriptor() const;
  private:
  bool _internal_has_briefdescriptor() const;
  public:
  void clear_briefdescriptor();
  const ::SerializedDescriptor& briefdescriptor() const;
  PROTOBUF_NODISCARD ::SerializedDescriptor* release_briefdescriptor();
  ::SerializedDescriptor* mutable_briefdescriptor();
  void set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor);
  private:
  const ::SerializedDescriptor& _internal_briefdescriptor() const;
  ::SerializedDescriptor* _internal_mutable_briefdescriptor();
  public:
  void unsafe_arena_set_allocated_briefdescriptor(
      ::SerializedDescriptor* briefdescriptor);
  ::SerializedDescriptor* unsafe_arena_release_briefdescriptor();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float visible = 3;
  void clear_visible();
  float visible() const;
  void set_visible(float value);
  private:
  float _internal_visible() const;
  void _internal_set_visible(float value);
  public:

  // float found = 4;
  void clear_found();
  float found() const;
  void set_found(float value);
  private:
  float _internal_found() const;
  void _internal_set_found(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedMappoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SerializedPosition* position_;
    ::SerializedDescriptor* briefdescriptor_;
    uint32_t id_;
    float visible_;
    float found_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedMappointArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedMappointArray) */ {
 public:
  inline SerializedMappointArray() : SerializedMappointArray(nullptr) {}
  ~SerializedMappointArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedMappointArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedMappointArray(const SerializedMappointArray& from);
  SerializedMappointArray(SerializedMappointArray&& from) noexcept
    : SerializedMappointArray() {
    *this = ::std::move(from);
  }

  inline SerializedMappointArray& operator=(const SerializedMappointArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedMappointArray& operator=(SerializedMappointArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedMappointArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedMappointArray* internal_default_instance() {
    return reinterpret_cast<const SerializedMappointArray*>(
               &_SerializedMappointArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SerializedMappointArray& a, SerializedMappointArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedMappointArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedMappointArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedMappointArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedMappointArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedMappointArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedMappointArray& from) {
    SerializedMappointArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedMappointArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedMappointArray";
  }
  protected:
  explicit SerializedMappointArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappointFieldNumber = 1,
  };
  // repeated .SerializedMappoint mappoint = 1;
  int mappoint_size() const;
  private:
  int _internal_mappoint_size() const;
  public:
  void clear_mappoint();
  ::SerializedMappoint* mutable_mappoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >*
      mutable_mappoint();
  private:
  const ::SerializedMappoint& _internal_mappoint(int index) const;
  ::SerializedMappoint* _internal_add_mappoint();
  public:
  const ::SerializedMappoint& mappoint(int index) const;
  ::SerializedMappoint* add_mappoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >&
      mappoint() const;

  // @@protoc_insertion_point(class_scope:SerializedMappointArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint > mappoint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedObject) */ {
 public:
  inline SerializedObject() : SerializedObject(nullptr) {}
  ~SerializedObject() override;
  explicit PROTOBUF_CONSTEXPR SerializedObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedObject(const SerializedObject& from);
  SerializedObject(SerializedObject&& from) noexcept
    : SerializedObject() {
    *this = ::std::move(from);
  }

  inline SerializedObject& operator=(const SerializedObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedObject& operator=(SerializedObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedObject* internal_default_instance() {
    return reinterpret_cast<const SerializedObject*>(
               &_SerializedObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SerializedObject& a, SerializedObject& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedObject& from) {
    SerializedObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedObject";
  }
  protected:
  explicit SerializedObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEllipsoidFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // .SerializedEllipsoid ellipsoid = 1;
  bool has_ellipsoid() const;
  private:
  bool _internal_has_ellipsoid() const;
  public:
  void clear_ellipsoid();
  const ::SerializedEllipsoid& ellipsoid() const;
  PROTOBUF_NODISCARD ::SerializedEllipsoid* release_ellipsoid();
  ::SerializedEllipsoid* mutable_ellipsoid();
  void set_allocated_ellipsoid(::SerializedEllipsoid* ellipsoid);
  private:
  const ::SerializedEllipsoid& _internal_ellipsoid() const;
  ::SerializedEllipsoid* _internal_mutable_ellipsoid();
  public:
  void unsafe_arena_set_allocated_ellipsoid(
      ::SerializedEllipsoid* ellipsoid);
  ::SerializedEllipsoid* unsafe_arena_release_ellipsoid();

  // uint32 object_id = 2;
  void clear_object_id();
  uint32_t object_id() const;
  void set_object_id(uint32_t value);
  private:
  uint32_t _internal_object_id() const;
  void _internal_set_object_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SerializedEllipsoid* ellipsoid_;
    uint32_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedObjectArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedObjectArray) */ {
 public:
  inline SerializedObjectArray() : SerializedObjectArray(nullptr) {}
  ~SerializedObjectArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedObjectArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedObjectArray(const SerializedObjectArray& from);
  SerializedObjectArray(SerializedObjectArray&& from) noexcept
    : SerializedObjectArray() {
    *this = ::std::move(from);
  }

  inline SerializedObjectArray& operator=(const SerializedObjectArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedObjectArray& operator=(SerializedObjectArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedObjectArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedObjectArray* internal_default_instance() {
    return reinterpret_cast<const SerializedObjectArray*>(
               &_SerializedObjectArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SerializedObjectArray& a, SerializedObjectArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedObjectArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedObjectArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedObjectArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedObjectArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedObjectArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedObjectArray& from) {
    SerializedObjectArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedObjectArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedObjectArray";
  }
  protected:
  explicit SerializedObjectArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 1,
  };
  // repeated .SerializedObject object = 1;
  int object_size() const;
  private:
  int _internal_object_size() const;
  public:
  void clear_object();
  ::SerializedObject* mutable_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObject >*
      mutable_object();
  private:
  const ::SerializedObject& _internal_object(int index) const;
  ::SerializedObject* _internal_add_object();
  public:
  const ::SerializedObject& object(int index) const;
  ::SerializedObject* add_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObject >&
      object() const;

  // @@protoc_insertion_point(class_scope:SerializedObjectArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObject > object_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedBBox2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedBBox2) */ {
 public:
  inline SerializedBBox2() : SerializedBBox2(nullptr) {}
  ~SerializedBBox2() override;
  explicit PROTOBUF_CONSTEXPR SerializedBBox2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedBBox2(const SerializedBBox2& from);
  SerializedBBox2(SerializedBBox2&& from) noexcept
    : SerializedBBox2() {
    *this = ::std::move(from);
  }

  inline SerializedBBox2& operator=(const SerializedBBox2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedBBox2& operator=(SerializedBBox2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedBBox2& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedBBox2* internal_default_instance() {
    return reinterpret_cast<const SerializedBBox2*>(
               &_SerializedBBox2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SerializedBBox2& a, SerializedBBox2& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedBBox2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedBBox2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedBBox2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedBBox2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedBBox2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedBBox2& from) {
    SerializedBBox2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedBBox2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedBBox2";
  }
  protected:
  explicit SerializedBBox2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
  };
  // float xmin = 1;
  void clear_xmin();
  float xmin() const;
  void set_xmin(float value);
  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);
  public:

  // float ymin = 2;
  void clear_ymin();
  float ymin() const;
  void set_ymin(float value);
  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);
  public:

  // float xmax = 3;
  void clear_xmax();
  float xmax() const;
  void set_xmax(float value);
  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);
  public:

  // float ymax = 4;
  void clear_ymax();
  float ymax() const;
  void set_ymax(float value);
  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedBBox2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float xmin_;
    float ymin_;
    float xmax_;
    float ymax_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedNode) */ {
 public:
  inline SerializedNode() : SerializedNode(nullptr) {}
  ~SerializedNode() override;
  explicit PROTOBUF_CONSTEXPR SerializedNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedNode(const SerializedNode& from);
  SerializedNode(SerializedNode&& from) noexcept
    : SerializedNode() {
    *this = ::std::move(from);
  }

  inline SerializedNode& operator=(const SerializedNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedNode& operator=(SerializedNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedNode* internal_default_instance() {
    return reinterpret_cast<const SerializedNode*>(
               &_SerializedNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SerializedNode& a, SerializedNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedNode& from) {
    SerializedNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedNode";
  }
  protected:
  explicit SerializedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighboursIdsFieldNumber = 3,
    kBboxFieldNumber = 5,
    kNodeIdFieldNumber = 1,
    kCategoryIdFieldNumber = 2,
    kObjectIdFieldNumber = 4,
  };
  // repeated uint32 neighbours_ids = 3;
  int neighbours_ids_size() const;
  private:
  int _internal_neighbours_ids_size() const;
  public:
  void clear_neighbours_ids();
  private:
  uint32_t _internal_neighbours_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_neighbours_ids() const;
  void _internal_add_neighbours_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_neighbours_ids();
  public:
  uint32_t neighbours_ids(int index) const;
  void set_neighbours_ids(int index, uint32_t value);
  void add_neighbours_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      neighbours_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_neighbours_ids();

  // .SerializedBBox2 bbox = 5;
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::SerializedBBox2& bbox() const;
  PROTOBUF_NODISCARD ::SerializedBBox2* release_bbox();
  ::SerializedBBox2* mutable_bbox();
  void set_allocated_bbox(::SerializedBBox2* bbox);
  private:
  const ::SerializedBBox2& _internal_bbox() const;
  ::SerializedBBox2* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::SerializedBBox2* bbox);
  ::SerializedBBox2* unsafe_arena_release_bbox();

  // uint32 node_id = 1;
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // uint32 category_id = 2;
  void clear_category_id();
  uint32_t category_id() const;
  void set_category_id(uint32_t value);
  private:
  uint32_t _internal_category_id() const;
  void _internal_set_category_id(uint32_t value);
  public:

  // uint32 object_id = 4;
  void clear_object_id();
  uint32_t object_id() const;
  void set_object_id(uint32_t value);
  private:
  uint32_t _internal_object_id() const;
  void _internal_set_object_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > neighbours_ids_;
    mutable std::atomic<int> _neighbours_ids_cached_byte_size_;
    ::SerializedBBox2* bbox_;
    uint32_t node_id_;
    uint32_t category_id_;
    uint32_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedGraph) */ {
 public:
  inline SerializedGraph() : SerializedGraph(nullptr) {}
  ~SerializedGraph() override;
  explicit PROTOBUF_CONSTEXPR SerializedGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedGraph(const SerializedGraph& from);
  SerializedGraph(SerializedGraph&& from) noexcept
    : SerializedGraph() {
    *this = ::std::move(from);
  }

  inline SerializedGraph& operator=(const SerializedGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedGraph& operator=(SerializedGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedGraph* internal_default_instance() {
    return reinterpret_cast<const SerializedGraph*>(
               &_SerializedGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SerializedGraph& a, SerializedGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedGraph& from) {
    SerializedGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedGraph";
  }
  protected:
  explicit SerializedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .SerializedNode node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::SerializedNode* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedNode >*
      mutable_node();
  private:
  const ::SerializedNode& _internal_node(int index) const;
  ::SerializedNode* _internal_add_node();
  public:
  const ::SerializedNode& node(int index) const;
  ::SerializedNode* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedNode >&
      node() const;

  // @@protoc_insertion_point(class_scope:SerializedGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedNode > node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedGraphArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedGraphArray) */ {
 public:
  inline SerializedGraphArray() : SerializedGraphArray(nullptr) {}
  ~SerializedGraphArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedGraphArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedGraphArray(const SerializedGraphArray& from);
  SerializedGraphArray(SerializedGraphArray&& from) noexcept
    : SerializedGraphArray() {
    *this = ::std::move(from);
  }

  inline SerializedGraphArray& operator=(const SerializedGraphArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedGraphArray& operator=(SerializedGraphArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedGraphArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedGraphArray* internal_default_instance() {
    return reinterpret_cast<const SerializedGraphArray*>(
               &_SerializedGraphArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SerializedGraphArray& a, SerializedGraphArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedGraphArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedGraphArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedGraphArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedGraphArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedGraphArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedGraphArray& from) {
    SerializedGraphArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedGraphArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedGraphArray";
  }
  protected:
  explicit SerializedGraphArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphFieldNumber = 1,
  };
  // repeated .SerializedGraph graph = 1;
  int graph_size() const;
  private:
  int _internal_graph_size() const;
  public:
  void clear_graph();
  ::SerializedGraph* mutable_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedGraph >*
      mutable_graph();
  private:
  const ::SerializedGraph& _internal_graph(int index) const;
  ::SerializedGraph* _internal_add_graph();
  public:
  const ::SerializedGraph& graph(int index) const;
  ::SerializedGraph* add_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedGraph >&
      graph() const;

  // @@protoc_insertion_point(class_scope:SerializedGraphArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedGraph > graph_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedObjectTrack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedObjectTrack) */ {
 public:
  inline SerializedObjectTrack() : SerializedObjectTrack(nullptr) {}
  ~SerializedObjectTrack() override;
  explicit PROTOBUF_CONSTEXPR SerializedObjectTrack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedObjectTrack(const SerializedObjectTrack& from);
  SerializedObjectTrack(SerializedObjectTrack&& from) noexcept
    : SerializedObjectTrack() {
    *this = ::std::move(from);
  }

  inline SerializedObjectTrack& operator=(const SerializedObjectTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedObjectTrack& operator=(SerializedObjectTrack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedObjectTrack& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedObjectTrack* internal_default_instance() {
    return reinterpret_cast<const SerializedObjectTrack*>(
               &_SerializedObjectTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SerializedObjectTrack& a, SerializedObjectTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedObjectTrack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedObjectTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedObjectTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedObjectTrack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedObjectTrack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedObjectTrack& from) {
    SerializedObjectTrack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedObjectTrack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedObjectTrack";
  }
  protected:
  explicit SerializedObjectTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKfBboxesFieldNumber = 8,
    kKfIndicesFieldNumber = 9,
    kKfScoresFieldNumber = 10,
    kIdFieldNumber = 1,
    kCatFieldNumber = 2,
    kLastFrameIdFieldNumber = 3,
    kColorRFieldNumber = 4,
    kColorGFieldNumber = 5,
    kColorBFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // repeated .SerializedBBox2 kf_bboxes = 8;
  int kf_bboxes_size() const;
  private:
  int _internal_kf_bboxes_size() const;
  public:
  void clear_kf_bboxes();
  ::SerializedBBox2* mutable_kf_bboxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedBBox2 >*
      mutable_kf_bboxes();
  private:
  const ::SerializedBBox2& _internal_kf_bboxes(int index) const;
  ::SerializedBBox2* _internal_add_kf_bboxes();
  public:
  const ::SerializedBBox2& kf_bboxes(int index) const;
  ::SerializedBBox2* add_kf_bboxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedBBox2 >&
      kf_bboxes() const;

  // repeated uint32 kf_indices = 9;
  int kf_indices_size() const;
  private:
  int _internal_kf_indices_size() const;
  public:
  void clear_kf_indices();
  private:
  uint32_t _internal_kf_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_kf_indices() const;
  void _internal_add_kf_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_kf_indices();
  public:
  uint32_t kf_indices(int index) const;
  void set_kf_indices(int index, uint32_t value);
  void add_kf_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      kf_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_kf_indices();

  // repeated double kf_scores = 10;
  int kf_scores_size() const;
  private:
  int _internal_kf_scores_size() const;
  public:
  void clear_kf_scores();
  private:
  double _internal_kf_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_kf_scores() const;
  void _internal_add_kf_scores(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_kf_scores();
  public:
  double kf_scores(int index) const;
  void set_kf_scores(int index, double value);
  void add_kf_scores(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      kf_scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_kf_scores();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 cat = 2;
  void clear_cat();
  uint32_t cat() const;
  void set_cat(uint32_t value);
  private:
  uint32_t _internal_cat() const;
  void _internal_set_cat(uint32_t value);
  public:

  // uint32 last_frame_id = 3;
  void clear_last_frame_id();
  uint32_t last_frame_id() const;
  void set_last_frame_id(uint32_t value);
  private:
  uint32_t _internal_last_frame_id() const;
  void _internal_set_last_frame_id(uint32_t value);
  public:

  // uint32 color_r = 4;
  void clear_color_r();
  uint32_t color_r() const;
  void set_color_r(uint32_t value);
  private:
  uint32_t _internal_color_r() const;
  void _internal_set_color_r(uint32_t value);
  public:

  // uint32 color_g = 5;
  void clear_color_g();
  uint32_t color_g() const;
  void set_color_g(uint32_t value);
  private:
  uint32_t _internal_color_g() const;
  void _internal_set_color_g(uint32_t value);
  public:

  // uint32 color_b = 6;
  void clear_color_b();
  uint32_t color_b() const;
  void set_color_b(uint32_t value);
  private:
  uint32_t _internal_color_b() const;
  void _internal_set_color_b(uint32_t value);
  public:

  // uint32 status = 7;
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedObjectTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedBBox2 > kf_bboxes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > kf_indices_;
    mutable std::atomic<int> _kf_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > kf_scores_;
    uint32_t id_;
    uint32_t cat_;
    uint32_t last_frame_id_;
    uint32_t color_r_;
    uint32_t color_g_;
    uint32_t color_b_;
    uint32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedObjectTrackArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedObjectTrackArray) */ {
 public:
  inline SerializedObjectTrackArray() : SerializedObjectTrackArray(nullptr) {}
  ~SerializedObjectTrackArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedObjectTrackArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedObjectTrackArray(const SerializedObjectTrackArray& from);
  SerializedObjectTrackArray(SerializedObjectTrackArray&& from) noexcept
    : SerializedObjectTrackArray() {
    *this = ::std::move(from);
  }

  inline SerializedObjectTrackArray& operator=(const SerializedObjectTrackArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedObjectTrackArray& operator=(SerializedObjectTrackArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedObjectTrackArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedObjectTrackArray* internal_default_instance() {
    return reinterpret_cast<const SerializedObjectTrackArray*>(
               &_SerializedObjectTrackArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SerializedObjectTrackArray& a, SerializedObjectTrackArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedObjectTrackArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedObjectTrackArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedObjectTrackArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedObjectTrackArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedObjectTrackArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedObjectTrackArray& from) {
    SerializedObjectTrackArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedObjectTrackArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedObjectTrackArray";
  }
  protected:
  explicit SerializedObjectTrackArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjecttrackFieldNumber = 1,
  };
  // repeated .SerializedObjectTrack objecttrack = 1;
  int objecttrack_size() const;
  private:
  int _internal_objecttrack_size() const;
  public:
  void clear_objecttrack();
  ::SerializedObjectTrack* mutable_objecttrack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObjectTrack >*
      mutable_objecttrack();
  private:
  const ::SerializedObjectTrack& _internal_objecttrack(int index) const;
  ::SerializedObjectTrack* _internal_add_objecttrack();
  public:
  const ::SerializedObjectTrack& objecttrack(int index) const;
  ::SerializedObjectTrack* add_objecttrack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObjectTrack >&
      objecttrack() const;

  // @@protoc_insertion_point(class_scope:SerializedObjectTrackArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObjectTrack > objecttrack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframe) */ {
 public:
  inline SerializedKeyframe() : SerializedKeyframe(nullptr) {}
  ~SerializedKeyframe() override;
  explicit PROTOBUF_CONSTEXPR SerializedKeyframe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframe(const SerializedKeyframe& from);
  SerializedKeyframe(SerializedKeyframe&& from) noexcept
    : SerializedKeyframe() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframe& operator=(const SerializedKeyframe& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframe& operator=(SerializedKeyframe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframe& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframe* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframe*>(
               &_SerializedKeyframe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SerializedKeyframe& a, SerializedKeyframe& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKeyframe& from) {
    SerializedKeyframe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframe";
  }
  protected:
  explicit SerializedKeyframe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopedgesidsFieldNumber = 5,
    kPoseFieldNumber = 2,
    kKmatrixFieldNumber = 3,
    kIdFieldNumber = 1,
    kKindexFieldNumber = 4,
    kTimestampFieldNumber = 6,
  };
  // repeated uint32 loopedgesids = 5;
  int loopedgesids_size() const;
  private:
  int _internal_loopedgesids_size() const;
  public:
  void clear_loopedgesids();
  private:
  uint32_t _internal_loopedgesids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_loopedgesids() const;
  void _internal_add_loopedgesids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_loopedgesids();
  public:
  uint32_t loopedgesids(int index) const;
  void set_loopedgesids(int index, uint32_t value);
  void add_loopedgesids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      loopedgesids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_loopedgesids();

  // .SerializedPose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::SerializedPose& pose() const;
  PROTOBUF_NODISCARD ::SerializedPose* release_pose();
  ::SerializedPose* mutable_pose();
  void set_allocated_pose(::SerializedPose* pose);
  private:
  const ::SerializedPose& _internal_pose() const;
  ::SerializedPose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::SerializedPose* pose);
  ::SerializedPose* unsafe_arena_release_pose();

  // .SerializedK kmatrix = 3;
  bool has_kmatrix() const;
  private:
  bool _internal_has_kmatrix() const;
  public:
  void clear_kmatrix();
  const ::SerializedK& kmatrix() const;
  PROTOBUF_NODISCARD ::SerializedK* release_kmatrix();
  ::SerializedK* mutable_kmatrix();
  void set_allocated_kmatrix(::SerializedK* kmatrix);
  private:
  const ::SerializedK& _internal_kmatrix() const;
  ::SerializedK* _internal_mutable_kmatrix();
  public:
  void unsafe_arena_set_allocated_kmatrix(
      ::SerializedK* kmatrix);
  ::SerializedK* unsafe_arena_release_kmatrix();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 kindex = 4;
  void clear_kindex();
  uint32_t kindex() const;
  void set_kindex(uint32_t value);
  private:
  uint32_t _internal_kindex() const;
  void _internal_set_kindex(uint32_t value);
  public:

  // double timestamp = 6;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeyframe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > loopedgesids_;
    mutable std::atomic<int> _loopedgesids_cached_byte_size_;
    ::SerializedPose* pose_;
    ::SerializedK* kmatrix_;
    uint32_t id_;
    uint32_t kindex_;
    double timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeArray) */ {
 public:
  inline SerializedKeyframeArray() : SerializedKeyframeArray(nullptr) {}
  ~SerializedKeyframeArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedKeyframeArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeArray(const SerializedKeyframeArray& from);
  SerializedKeyframeArray(SerializedKeyframeArray&& from) noexcept
    : SerializedKeyframeArray() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeArray& operator=(const SerializedKeyframeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeArray& operator=(SerializedKeyframeArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeArray*>(
               &_SerializedKeyframeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SerializedKeyframeArray& a, SerializedKeyframeArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKeyframeArray& from) {
    SerializedKeyframeArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeArray";
  }
  protected:
  explicit SerializedKeyframeArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // repeated .SerializedKeyframe keyframe = 1;
  int keyframe_size() const;
  private:
  int _internal_keyframe_size() const;
  public:
  void clear_keyframe();
  ::SerializedKeyframe* mutable_keyframe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >*
      mutable_keyframe();
  private:
  const ::SerializedKeyframe& _internal_keyframe(int index) const;
  ::SerializedKeyframe* _internal_add_keyframe();
  public:
  const ::SerializedKeyframe& keyframe(int index) const;
  ::SerializedKeyframe* add_keyframe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >&
      keyframe() const;

  // @@protoc_insertion_point(class_scope:SerializedKeyframeArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe > keyframe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedFeature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedFeature) */ {
 public:
  inline SerializedFeature() : SerializedFeature(nullptr) {}
  ~SerializedFeature() override;
  explicit PROTOBUF_CONSTEXPR SerializedFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedFeature(const SerializedFeature& from);
  SerializedFeature(SerializedFeature&& from) noexcept
    : SerializedFeature() {
    *this = ::std::move(from);
  }

  inline SerializedFeature& operator=(const SerializedFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedFeature& operator=(SerializedFeature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedFeature* internal_default_instance() {
    return reinterpret_cast<const SerializedFeature*>(
               &_SerializedFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SerializedFeature& a, SerializedFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedFeature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedFeature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedFeature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedFeature& from) {
    SerializedFeature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedFeature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedFeature";
  }
  protected:
  explicit SerializedFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointFieldNumber = 3,
    kBriefdescriptorFieldNumber = 4,
    kMappointIdFieldNumber = 2,
  };
  // .SerializedKeypoint keypoint = 3;
  bool has_keypoint() const;
  private:
  bool _internal_has_keypoint() const;
  public:
  void clear_keypoint();
  const ::SerializedKeypoint& keypoint() const;
  PROTOBUF_NODISCARD ::SerializedKeypoint* release_keypoint();
  ::SerializedKeypoint* mutable_keypoint();
  void set_allocated_keypoint(::SerializedKeypoint* keypoint);
  private:
  const ::SerializedKeypoint& _internal_keypoint() const;
  ::SerializedKeypoint* _internal_mutable_keypoint();
  public:
  void unsafe_arena_set_allocated_keypoint(
      ::SerializedKeypoint* keypoint);
  ::SerializedKeypoint* unsafe_arena_release_keypoint();

  // .SerializedDescriptor briefdescriptor = 4;
  bool has_briefdescriptor() const;
  private:
  bool _internal_has_briefdescriptor() const;
  public:
  void clear_briefdescriptor();
  const ::SerializedDescriptor& briefdescriptor() const;
  PROTOBUF_NODISCARD ::SerializedDescriptor* release_briefdescriptor();
  ::SerializedDescriptor* mutable_briefdescriptor();
  void set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor);
  private:
  const ::SerializedDescriptor& _internal_briefdescriptor() const;
  ::SerializedDescriptor* _internal_mutable_briefdescriptor();
  public:
  void unsafe_arena_set_allocated_briefdescriptor(
      ::SerializedDescriptor* briefdescriptor);
  ::SerializedDescriptor* unsafe_arena_release_briefdescriptor();

  // uint32 mappoint_id = 2;
  void clear_mappoint_id();
  uint32_t mappoint_id() const;
  void set_mappoint_id(uint32_t value);
  private:
  uint32_t _internal_mappoint_id() const;
  void _internal_set_mappoint_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SerializedKeypoint* keypoint_;
    ::SerializedDescriptor* briefdescriptor_;
    uint32_t mappoint_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeFeatures final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeFeatures) */ {
 public:
  inline SerializedKeyframeFeatures() : SerializedKeyframeFeatures(nullptr) {}
  ~SerializedKeyframeFeatures() override;
  explicit PROTOBUF_CONSTEXPR SerializedKeyframeFeatures(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeFeatures(const SerializedKeyframeFeatures& from);
  SerializedKeyframeFeatures(SerializedKeyframeFeatures&& from) noexcept
    : SerializedKeyframeFeatures() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeFeatures& operator=(const SerializedKeyframeFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeFeatures& operator=(SerializedKeyframeFeatures&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeFeatures& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeFeatures* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeFeatures*>(
               &_SerializedKeyframeFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SerializedKeyframeFeatures& a, SerializedKeyframeFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeFeatures* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeFeatures>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeFeatures& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKeyframeFeatures& from) {
    SerializedKeyframeFeatures::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeFeatures* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeFeatures";
  }
  protected:
  explicit SerializedKeyframeFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 2,
    kKeyframeIdFieldNumber = 1,
  };
  // repeated .SerializedFeature feature = 2;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::SerializedFeature* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >*
      mutable_feature();
  private:
  const ::SerializedFeature& _internal_feature(int index) const;
  ::SerializedFeature* _internal_add_feature();
  public:
  const ::SerializedFeature& feature(int index) const;
  ::SerializedFeature* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >&
      feature() const;

  // uint32 keyframe_id = 1;
  void clear_keyframe_id();
  uint32_t keyframe_id() const;
  void set_keyframe_id(uint32_t value);
  private:
  uint32_t _internal_keyframe_id() const;
  void _internal_set_keyframe_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SerializedKeyframeFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature > feature_;
    uint32_t keyframe_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// -------------------------------------------------------------------

class SerializedKeyframeFeaturesArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedKeyframeFeaturesArray) */ {
 public:
  inline SerializedKeyframeFeaturesArray() : SerializedKeyframeFeaturesArray(nullptr) {}
  ~SerializedKeyframeFeaturesArray() override;
  explicit PROTOBUF_CONSTEXPR SerializedKeyframeFeaturesArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedKeyframeFeaturesArray(const SerializedKeyframeFeaturesArray& from);
  SerializedKeyframeFeaturesArray(SerializedKeyframeFeaturesArray&& from) noexcept
    : SerializedKeyframeFeaturesArray() {
    *this = ::std::move(from);
  }

  inline SerializedKeyframeFeaturesArray& operator=(const SerializedKeyframeFeaturesArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedKeyframeFeaturesArray& operator=(SerializedKeyframeFeaturesArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SerializedKeyframeFeaturesArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedKeyframeFeaturesArray* internal_default_instance() {
    return reinterpret_cast<const SerializedKeyframeFeaturesArray*>(
               &_SerializedKeyframeFeaturesArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SerializedKeyframeFeaturesArray& a, SerializedKeyframeFeaturesArray& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedKeyframeFeaturesArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedKeyframeFeaturesArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedKeyframeFeaturesArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedKeyframeFeaturesArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SerializedKeyframeFeaturesArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SerializedKeyframeFeaturesArray& from) {
    SerializedKeyframeFeaturesArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedKeyframeFeaturesArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedKeyframeFeaturesArray";
  }
  protected:
  explicit SerializedKeyframeFeaturesArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
  };
  // repeated .SerializedKeyframeFeatures feature = 1;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  ::SerializedKeyframeFeatures* mutable_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >*
      mutable_feature();
  private:
  const ::SerializedKeyframeFeatures& _internal_feature(int index) const;
  ::SerializedKeyframeFeatures* _internal_add_feature();
  public:
  const ::SerializedKeyframeFeatures& feature(int index) const;
  ::SerializedKeyframeFeatures* add_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >&
      feature() const;

  // @@protoc_insertion_point(class_scope:SerializedKeyframeFeaturesArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures > feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_osmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedDescriptor

// repeated fixed32 block = 1;
inline int SerializedDescriptor::_internal_block_size() const {
  return _impl_.block_.size();
}
inline int SerializedDescriptor::block_size() const {
  return _internal_block_size();
}
inline void SerializedDescriptor::clear_block() {
  _impl_.block_.Clear();
}
inline uint32_t SerializedDescriptor::_internal_block(int index) const {
  return _impl_.block_.Get(index);
}
inline uint32_t SerializedDescriptor::block(int index) const {
  // @@protoc_insertion_point(field_get:SerializedDescriptor.block)
  return _internal_block(index);
}
inline void SerializedDescriptor::set_block(int index, uint32_t value) {
  _impl_.block_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedDescriptor.block)
}
inline void SerializedDescriptor::_internal_add_block(uint32_t value) {
  _impl_.block_.Add(value);
}
inline void SerializedDescriptor::add_block(uint32_t value) {
  _internal_add_block(value);
  // @@protoc_insertion_point(field_add:SerializedDescriptor.block)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedDescriptor::_internal_block() const {
  return _impl_.block_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedDescriptor::block() const {
  // @@protoc_insertion_point(field_list:SerializedDescriptor.block)
  return _internal_block();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedDescriptor::_internal_mutable_block() {
  return &_impl_.block_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedDescriptor::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:SerializedDescriptor.block)
  return _internal_mutable_block();
}

// -------------------------------------------------------------------

// SerializedPose

// repeated float element = 1;
inline int SerializedPose::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int SerializedPose::element_size() const {
  return _internal_element_size();
}
inline void SerializedPose::clear_element() {
  _impl_.element_.Clear();
}
inline float SerializedPose::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline float SerializedPose::element(int index) const {
  // @@protoc_insertion_point(field_get:SerializedPose.element)
  return _internal_element(index);
}
inline void SerializedPose::set_element(int index, float value) {
  _impl_.element_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedPose.element)
}
inline void SerializedPose::_internal_add_element(float value) {
  _impl_.element_.Add(value);
}
inline void SerializedPose::add_element(float value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:SerializedPose.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedPose::_internal_element() const {
  return _impl_.element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedPose::element() const {
  // @@protoc_insertion_point(field_list:SerializedPose.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedPose::_internal_mutable_element() {
  return &_impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedPose::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:SerializedPose.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// SerializedPosition

// float x = 1;
inline void SerializedPosition::clear_x() {
  _impl_.x_ = 0;
}
inline float SerializedPosition::_internal_x() const {
  return _impl_.x_;
}
inline float SerializedPosition::x() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.x)
  return _internal_x();
}
inline void SerializedPosition::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void SerializedPosition::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.x)
}

// float y = 2;
inline void SerializedPosition::clear_y() {
  _impl_.y_ = 0;
}
inline float SerializedPosition::_internal_y() const {
  return _impl_.y_;
}
inline float SerializedPosition::y() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.y)
  return _internal_y();
}
inline void SerializedPosition::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void SerializedPosition::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.y)
}

// float z = 3;
inline void SerializedPosition::clear_z() {
  _impl_.z_ = 0;
}
inline float SerializedPosition::_internal_z() const {
  return _impl_.z_;
}
inline float SerializedPosition::z() const {
  // @@protoc_insertion_point(field_get:SerializedPosition.z)
  return _internal_z();
}
inline void SerializedPosition::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void SerializedPosition::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SerializedPosition.z)
}

// -------------------------------------------------------------------

// SerializedKeypoint

// float ptx = 1;
inline void SerializedKeypoint::clear_ptx() {
  _impl_.ptx_ = 0;
}
inline float SerializedKeypoint::_internal_ptx() const {
  return _impl_.ptx_;
}
inline float SerializedKeypoint::ptx() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.ptx)
  return _internal_ptx();
}
inline void SerializedKeypoint::_internal_set_ptx(float value) {
  
  _impl_.ptx_ = value;
}
inline void SerializedKeypoint::set_ptx(float value) {
  _internal_set_ptx(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.ptx)
}

// float pty = 2;
inline void SerializedKeypoint::clear_pty() {
  _impl_.pty_ = 0;
}
inline float SerializedKeypoint::_internal_pty() const {
  return _impl_.pty_;
}
inline float SerializedKeypoint::pty() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.pty)
  return _internal_pty();
}
inline void SerializedKeypoint::_internal_set_pty(float value) {
  
  _impl_.pty_ = value;
}
inline void SerializedKeypoint::set_pty(float value) {
  _internal_set_pty(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.pty)
}

// float angle = 3;
inline void SerializedKeypoint::clear_angle() {
  _impl_.angle_ = 0;
}
inline float SerializedKeypoint::_internal_angle() const {
  return _impl_.angle_;
}
inline float SerializedKeypoint::angle() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.angle)
  return _internal_angle();
}
inline void SerializedKeypoint::_internal_set_angle(float value) {
  
  _impl_.angle_ = value;
}
inline void SerializedKeypoint::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.angle)
}

// float octave = 4;
inline void SerializedKeypoint::clear_octave() {
  _impl_.octave_ = 0;
}
inline float SerializedKeypoint::_internal_octave() const {
  return _impl_.octave_;
}
inline float SerializedKeypoint::octave() const {
  // @@protoc_insertion_point(field_get:SerializedKeypoint.octave)
  return _internal_octave();
}
inline void SerializedKeypoint::_internal_set_octave(float value) {
  
  _impl_.octave_ = value;
}
inline void SerializedKeypoint::set_octave(float value) {
  _internal_set_octave(value);
  // @@protoc_insertion_point(field_set:SerializedKeypoint.octave)
}

// -------------------------------------------------------------------

// SerializedK

// float fx = 1;
inline void SerializedK::clear_fx() {
  _impl_.fx_ = 0;
}
inline float SerializedK::_internal_fx() const {
  return _impl_.fx_;
}
inline float SerializedK::fx() const {
  // @@protoc_insertion_point(field_get:SerializedK.fx)
  return _internal_fx();
}
inline void SerializedK::_internal_set_fx(float value) {
  
  _impl_.fx_ = value;
}
inline void SerializedK::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:SerializedK.fx)
}

// float fy = 2;
inline void SerializedK::clear_fy() {
  _impl_.fy_ = 0;
}
inline float SerializedK::_internal_fy() const {
  return _impl_.fy_;
}
inline float SerializedK::fy() const {
  // @@protoc_insertion_point(field_get:SerializedK.fy)
  return _internal_fy();
}
inline void SerializedK::_internal_set_fy(float value) {
  
  _impl_.fy_ = value;
}
inline void SerializedK::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:SerializedK.fy)
}

// float cx = 3;
inline void SerializedK::clear_cx() {
  _impl_.cx_ = 0;
}
inline float SerializedK::_internal_cx() const {
  return _impl_.cx_;
}
inline float SerializedK::cx() const {
  // @@protoc_insertion_point(field_get:SerializedK.cx)
  return _internal_cx();
}
inline void SerializedK::_internal_set_cx(float value) {
  
  _impl_.cx_ = value;
}
inline void SerializedK::set_cx(float value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:SerializedK.cx)
}

// float cy = 4;
inline void SerializedK::clear_cy() {
  _impl_.cy_ = 0;
}
inline float SerializedK::_internal_cy() const {
  return _impl_.cy_;
}
inline float SerializedK::cy() const {
  // @@protoc_insertion_point(field_get:SerializedK.cy)
  return _internal_cy();
}
inline void SerializedK::_internal_set_cy(float value) {
  
  _impl_.cy_ = value;
}
inline void SerializedK::set_cy(float value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:SerializedK.cy)
}

// -------------------------------------------------------------------

// SerializedKArray

// repeated .SerializedK k = 1;
inline int SerializedKArray::_internal_k_size() const {
  return _impl_.k_.size();
}
inline int SerializedKArray::k_size() const {
  return _internal_k_size();
}
inline void SerializedKArray::clear_k() {
  _impl_.k_.Clear();
}
inline ::SerializedK* SerializedKArray::mutable_k(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKArray.k)
  return _impl_.k_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >*
SerializedKArray::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKArray.k)
  return &_impl_.k_;
}
inline const ::SerializedK& SerializedKArray::_internal_k(int index) const {
  return _impl_.k_.Get(index);
}
inline const ::SerializedK& SerializedKArray::k(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKArray.k)
  return _internal_k(index);
}
inline ::SerializedK* SerializedKArray::_internal_add_k() {
  return _impl_.k_.Add();
}
inline ::SerializedK* SerializedKArray::add_k() {
  ::SerializedK* _add = _internal_add_k();
  // @@protoc_insertion_point(field_add:SerializedKArray.k)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedK >&
SerializedKArray::k() const {
  // @@protoc_insertion_point(field_list:SerializedKArray.k)
  return _impl_.k_;
}

// -------------------------------------------------------------------

// SerializedEllipsoid

// repeated float element = 1;
inline int SerializedEllipsoid::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int SerializedEllipsoid::element_size() const {
  return _internal_element_size();
}
inline void SerializedEllipsoid::clear_element() {
  _impl_.element_.Clear();
}
inline float SerializedEllipsoid::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline float SerializedEllipsoid::element(int index) const {
  // @@protoc_insertion_point(field_get:SerializedEllipsoid.element)
  return _internal_element(index);
}
inline void SerializedEllipsoid::set_element(int index, float value) {
  _impl_.element_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedEllipsoid.element)
}
inline void SerializedEllipsoid::_internal_add_element(float value) {
  _impl_.element_.Add(value);
}
inline void SerializedEllipsoid::add_element(float value) {
  _internal_add_element(value);
  // @@protoc_insertion_point(field_add:SerializedEllipsoid.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedEllipsoid::_internal_element() const {
  return _impl_.element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SerializedEllipsoid::element() const {
  // @@protoc_insertion_point(field_list:SerializedEllipsoid.element)
  return _internal_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedEllipsoid::_internal_mutable_element() {
  return &_impl_.element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SerializedEllipsoid::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:SerializedEllipsoid.element)
  return _internal_mutable_element();
}

// -------------------------------------------------------------------

// SerializedMappoint

// uint32 id = 1;
inline void SerializedMappoint::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t SerializedMappoint::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t SerializedMappoint::id() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.id)
  return _internal_id();
}
inline void SerializedMappoint::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void SerializedMappoint::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.id)
}

// .SerializedPosition position = 2;
inline bool SerializedMappoint::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool SerializedMappoint::has_position() const {
  return _internal_has_position();
}
inline void SerializedMappoint::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::SerializedPosition& SerializedMappoint::_internal_position() const {
  const ::SerializedPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedPosition&>(
      ::_SerializedPosition_default_instance_);
}
inline const ::SerializedPosition& SerializedMappoint::position() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.position)
  return _internal_position();
}
inline void SerializedMappoint::unsafe_arena_set_allocated_position(
    ::SerializedPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedMappoint.position)
}
inline ::SerializedPosition* SerializedMappoint::release_position() {
  
  ::SerializedPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedPosition* SerializedMappoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.position)
  
  ::SerializedPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::SerializedPosition* SerializedMappoint::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::SerializedPosition* SerializedMappoint::mutable_position() {
  ::SerializedPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.position)
  return _msg;
}
inline void SerializedMappoint::set_allocated_position(::SerializedPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.position)
}

// float visible = 3;
inline void SerializedMappoint::clear_visible() {
  _impl_.visible_ = 0;
}
inline float SerializedMappoint::_internal_visible() const {
  return _impl_.visible_;
}
inline float SerializedMappoint::visible() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.visible)
  return _internal_visible();
}
inline void SerializedMappoint::_internal_set_visible(float value) {
  
  _impl_.visible_ = value;
}
inline void SerializedMappoint::set_visible(float value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.visible)
}

// float found = 4;
inline void SerializedMappoint::clear_found() {
  _impl_.found_ = 0;
}
inline float SerializedMappoint::_internal_found() const {
  return _impl_.found_;
}
inline float SerializedMappoint::found() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.found)
  return _internal_found();
}
inline void SerializedMappoint::_internal_set_found(float value) {
  
  _impl_.found_ = value;
}
inline void SerializedMappoint::set_found(float value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:SerializedMappoint.found)
}

// .SerializedDescriptor briefdescriptor = 5;
inline bool SerializedMappoint::_internal_has_briefdescriptor() const {
  return this != internal_default_instance() && _impl_.briefdescriptor_ != nullptr;
}
inline bool SerializedMappoint::has_briefdescriptor() const {
  return _internal_has_briefdescriptor();
}
inline void SerializedMappoint::clear_briefdescriptor() {
  if (GetArenaForAllocation() == nullptr && _impl_.briefdescriptor_ != nullptr) {
    delete _impl_.briefdescriptor_;
  }
  _impl_.briefdescriptor_ = nullptr;
}
inline const ::SerializedDescriptor& SerializedMappoint::_internal_briefdescriptor() const {
  const ::SerializedDescriptor* p = _impl_.briefdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedDescriptor&>(
      ::_SerializedDescriptor_default_instance_);
}
inline const ::SerializedDescriptor& SerializedMappoint::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedMappoint.briefdescriptor)
  return _internal_briefdescriptor();
}
inline void SerializedMappoint::unsafe_arena_set_allocated_briefdescriptor(
    ::SerializedDescriptor* briefdescriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.briefdescriptor_);
  }
  _impl_.briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedMappoint.briefdescriptor)
}
inline ::SerializedDescriptor* SerializedMappoint::release_briefdescriptor() {
  
  ::SerializedDescriptor* temp = _impl_.briefdescriptor_;
  _impl_.briefdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedDescriptor* SerializedMappoint::unsafe_arena_release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedMappoint.briefdescriptor)
  
  ::SerializedDescriptor* temp = _impl_.briefdescriptor_;
  _impl_.briefdescriptor_ = nullptr;
  return temp;
}
inline ::SerializedDescriptor* SerializedMappoint::_internal_mutable_briefdescriptor() {
  
  if (_impl_.briefdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedDescriptor>(GetArenaForAllocation());
    _impl_.briefdescriptor_ = p;
  }
  return _impl_.briefdescriptor_;
}
inline ::SerializedDescriptor* SerializedMappoint::mutable_briefdescriptor() {
  ::SerializedDescriptor* _msg = _internal_mutable_briefdescriptor();
  // @@protoc_insertion_point(field_mutable:SerializedMappoint.briefdescriptor)
  return _msg;
}
inline void SerializedMappoint::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.briefdescriptor_;
  }
  if (briefdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(briefdescriptor);
    if (message_arena != submessage_arena) {
      briefdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, briefdescriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.briefdescriptor_ = briefdescriptor;
  // @@protoc_insertion_point(field_set_allocated:SerializedMappoint.briefdescriptor)
}

// -------------------------------------------------------------------

// SerializedMappointArray

// repeated .SerializedMappoint mappoint = 1;
inline int SerializedMappointArray::_internal_mappoint_size() const {
  return _impl_.mappoint_.size();
}
inline int SerializedMappointArray::mappoint_size() const {
  return _internal_mappoint_size();
}
inline void SerializedMappointArray::clear_mappoint() {
  _impl_.mappoint_.Clear();
}
inline ::SerializedMappoint* SerializedMappointArray::mutable_mappoint(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedMappointArray.mappoint)
  return _impl_.mappoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >*
SerializedMappointArray::mutable_mappoint() {
  // @@protoc_insertion_point(field_mutable_list:SerializedMappointArray.mappoint)
  return &_impl_.mappoint_;
}
inline const ::SerializedMappoint& SerializedMappointArray::_internal_mappoint(int index) const {
  return _impl_.mappoint_.Get(index);
}
inline const ::SerializedMappoint& SerializedMappointArray::mappoint(int index) const {
  // @@protoc_insertion_point(field_get:SerializedMappointArray.mappoint)
  return _internal_mappoint(index);
}
inline ::SerializedMappoint* SerializedMappointArray::_internal_add_mappoint() {
  return _impl_.mappoint_.Add();
}
inline ::SerializedMappoint* SerializedMappointArray::add_mappoint() {
  ::SerializedMappoint* _add = _internal_add_mappoint();
  // @@protoc_insertion_point(field_add:SerializedMappointArray.mappoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedMappoint >&
SerializedMappointArray::mappoint() const {
  // @@protoc_insertion_point(field_list:SerializedMappointArray.mappoint)
  return _impl_.mappoint_;
}

// -------------------------------------------------------------------

// SerializedObject

// .SerializedEllipsoid ellipsoid = 1;
inline bool SerializedObject::_internal_has_ellipsoid() const {
  return this != internal_default_instance() && _impl_.ellipsoid_ != nullptr;
}
inline bool SerializedObject::has_ellipsoid() const {
  return _internal_has_ellipsoid();
}
inline void SerializedObject::clear_ellipsoid() {
  if (GetArenaForAllocation() == nullptr && _impl_.ellipsoid_ != nullptr) {
    delete _impl_.ellipsoid_;
  }
  _impl_.ellipsoid_ = nullptr;
}
inline const ::SerializedEllipsoid& SerializedObject::_internal_ellipsoid() const {
  const ::SerializedEllipsoid* p = _impl_.ellipsoid_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedEllipsoid&>(
      ::_SerializedEllipsoid_default_instance_);
}
inline const ::SerializedEllipsoid& SerializedObject::ellipsoid() const {
  // @@protoc_insertion_point(field_get:SerializedObject.ellipsoid)
  return _internal_ellipsoid();
}
inline void SerializedObject::unsafe_arena_set_allocated_ellipsoid(
    ::SerializedEllipsoid* ellipsoid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ellipsoid_);
  }
  _impl_.ellipsoid_ = ellipsoid;
  if (ellipsoid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedObject.ellipsoid)
}
inline ::SerializedEllipsoid* SerializedObject::release_ellipsoid() {
  
  ::SerializedEllipsoid* temp = _impl_.ellipsoid_;
  _impl_.ellipsoid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedEllipsoid* SerializedObject::unsafe_arena_release_ellipsoid() {
  // @@protoc_insertion_point(field_release:SerializedObject.ellipsoid)
  
  ::SerializedEllipsoid* temp = _impl_.ellipsoid_;
  _impl_.ellipsoid_ = nullptr;
  return temp;
}
inline ::SerializedEllipsoid* SerializedObject::_internal_mutable_ellipsoid() {
  
  if (_impl_.ellipsoid_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedEllipsoid>(GetArenaForAllocation());
    _impl_.ellipsoid_ = p;
  }
  return _impl_.ellipsoid_;
}
inline ::SerializedEllipsoid* SerializedObject::mutable_ellipsoid() {
  ::SerializedEllipsoid* _msg = _internal_mutable_ellipsoid();
  // @@protoc_insertion_point(field_mutable:SerializedObject.ellipsoid)
  return _msg;
}
inline void SerializedObject::set_allocated_ellipsoid(::SerializedEllipsoid* ellipsoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ellipsoid_;
  }
  if (ellipsoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ellipsoid);
    if (message_arena != submessage_arena) {
      ellipsoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ellipsoid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ellipsoid_ = ellipsoid;
  // @@protoc_insertion_point(field_set_allocated:SerializedObject.ellipsoid)
}

// uint32 object_id = 2;
inline void SerializedObject::clear_object_id() {
  _impl_.object_id_ = 0u;
}
inline uint32_t SerializedObject::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint32_t SerializedObject::object_id() const {
  // @@protoc_insertion_point(field_get:SerializedObject.object_id)
  return _internal_object_id();
}
inline void SerializedObject::_internal_set_object_id(uint32_t value) {
  
  _impl_.object_id_ = value;
}
inline void SerializedObject::set_object_id(uint32_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:SerializedObject.object_id)
}

// -------------------------------------------------------------------

// SerializedObjectArray

// repeated .SerializedObject object = 1;
inline int SerializedObjectArray::_internal_object_size() const {
  return _impl_.object_.size();
}
inline int SerializedObjectArray::object_size() const {
  return _internal_object_size();
}
inline void SerializedObjectArray::clear_object() {
  _impl_.object_.Clear();
}
inline ::SerializedObject* SerializedObjectArray::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedObjectArray.object)
  return _impl_.object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObject >*
SerializedObjectArray::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:SerializedObjectArray.object)
  return &_impl_.object_;
}
inline const ::SerializedObject& SerializedObjectArray::_internal_object(int index) const {
  return _impl_.object_.Get(index);
}
inline const ::SerializedObject& SerializedObjectArray::object(int index) const {
  // @@protoc_insertion_point(field_get:SerializedObjectArray.object)
  return _internal_object(index);
}
inline ::SerializedObject* SerializedObjectArray::_internal_add_object() {
  return _impl_.object_.Add();
}
inline ::SerializedObject* SerializedObjectArray::add_object() {
  ::SerializedObject* _add = _internal_add_object();
  // @@protoc_insertion_point(field_add:SerializedObjectArray.object)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObject >&
SerializedObjectArray::object() const {
  // @@protoc_insertion_point(field_list:SerializedObjectArray.object)
  return _impl_.object_;
}

// -------------------------------------------------------------------

// SerializedBBox2

// float xmin = 1;
inline void SerializedBBox2::clear_xmin() {
  _impl_.xmin_ = 0;
}
inline float SerializedBBox2::_internal_xmin() const {
  return _impl_.xmin_;
}
inline float SerializedBBox2::xmin() const {
  // @@protoc_insertion_point(field_get:SerializedBBox2.xmin)
  return _internal_xmin();
}
inline void SerializedBBox2::_internal_set_xmin(float value) {
  
  _impl_.xmin_ = value;
}
inline void SerializedBBox2::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:SerializedBBox2.xmin)
}

// float ymin = 2;
inline void SerializedBBox2::clear_ymin() {
  _impl_.ymin_ = 0;
}
inline float SerializedBBox2::_internal_ymin() const {
  return _impl_.ymin_;
}
inline float SerializedBBox2::ymin() const {
  // @@protoc_insertion_point(field_get:SerializedBBox2.ymin)
  return _internal_ymin();
}
inline void SerializedBBox2::_internal_set_ymin(float value) {
  
  _impl_.ymin_ = value;
}
inline void SerializedBBox2::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:SerializedBBox2.ymin)
}

// float xmax = 3;
inline void SerializedBBox2::clear_xmax() {
  _impl_.xmax_ = 0;
}
inline float SerializedBBox2::_internal_xmax() const {
  return _impl_.xmax_;
}
inline float SerializedBBox2::xmax() const {
  // @@protoc_insertion_point(field_get:SerializedBBox2.xmax)
  return _internal_xmax();
}
inline void SerializedBBox2::_internal_set_xmax(float value) {
  
  _impl_.xmax_ = value;
}
inline void SerializedBBox2::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:SerializedBBox2.xmax)
}

// float ymax = 4;
inline void SerializedBBox2::clear_ymax() {
  _impl_.ymax_ = 0;
}
inline float SerializedBBox2::_internal_ymax() const {
  return _impl_.ymax_;
}
inline float SerializedBBox2::ymax() const {
  // @@protoc_insertion_point(field_get:SerializedBBox2.ymax)
  return _internal_ymax();
}
inline void SerializedBBox2::_internal_set_ymax(float value) {
  
  _impl_.ymax_ = value;
}
inline void SerializedBBox2::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:SerializedBBox2.ymax)
}

// -------------------------------------------------------------------

// SerializedNode

// uint32 node_id = 1;
inline void SerializedNode::clear_node_id() {
  _impl_.node_id_ = 0u;
}
inline uint32_t SerializedNode::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint32_t SerializedNode::node_id() const {
  // @@protoc_insertion_point(field_get:SerializedNode.node_id)
  return _internal_node_id();
}
inline void SerializedNode::_internal_set_node_id(uint32_t value) {
  
  _impl_.node_id_ = value;
}
inline void SerializedNode::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:SerializedNode.node_id)
}

// uint32 category_id = 2;
inline void SerializedNode::clear_category_id() {
  _impl_.category_id_ = 0u;
}
inline uint32_t SerializedNode::_internal_category_id() const {
  return _impl_.category_id_;
}
inline uint32_t SerializedNode::category_id() const {
  // @@protoc_insertion_point(field_get:SerializedNode.category_id)
  return _internal_category_id();
}
inline void SerializedNode::_internal_set_category_id(uint32_t value) {
  
  _impl_.category_id_ = value;
}
inline void SerializedNode::set_category_id(uint32_t value) {
  _internal_set_category_id(value);
  // @@protoc_insertion_point(field_set:SerializedNode.category_id)
}

// repeated uint32 neighbours_ids = 3;
inline int SerializedNode::_internal_neighbours_ids_size() const {
  return _impl_.neighbours_ids_.size();
}
inline int SerializedNode::neighbours_ids_size() const {
  return _internal_neighbours_ids_size();
}
inline void SerializedNode::clear_neighbours_ids() {
  _impl_.neighbours_ids_.Clear();
}
inline uint32_t SerializedNode::_internal_neighbours_ids(int index) const {
  return _impl_.neighbours_ids_.Get(index);
}
inline uint32_t SerializedNode::neighbours_ids(int index) const {
  // @@protoc_insertion_point(field_get:SerializedNode.neighbours_ids)
  return _internal_neighbours_ids(index);
}
inline void SerializedNode::set_neighbours_ids(int index, uint32_t value) {
  _impl_.neighbours_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedNode.neighbours_ids)
}
inline void SerializedNode::_internal_add_neighbours_ids(uint32_t value) {
  _impl_.neighbours_ids_.Add(value);
}
inline void SerializedNode::add_neighbours_ids(uint32_t value) {
  _internal_add_neighbours_ids(value);
  // @@protoc_insertion_point(field_add:SerializedNode.neighbours_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedNode::_internal_neighbours_ids() const {
  return _impl_.neighbours_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedNode::neighbours_ids() const {
  // @@protoc_insertion_point(field_list:SerializedNode.neighbours_ids)
  return _internal_neighbours_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedNode::_internal_mutable_neighbours_ids() {
  return &_impl_.neighbours_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedNode::mutable_neighbours_ids() {
  // @@protoc_insertion_point(field_mutable_list:SerializedNode.neighbours_ids)
  return _internal_mutable_neighbours_ids();
}

// uint32 object_id = 4;
inline void SerializedNode::clear_object_id() {
  _impl_.object_id_ = 0u;
}
inline uint32_t SerializedNode::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint32_t SerializedNode::object_id() const {
  // @@protoc_insertion_point(field_get:SerializedNode.object_id)
  return _internal_object_id();
}
inline void SerializedNode::_internal_set_object_id(uint32_t value) {
  
  _impl_.object_id_ = value;
}
inline void SerializedNode::set_object_id(uint32_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:SerializedNode.object_id)
}

// .SerializedBBox2 bbox = 5;
inline bool SerializedNode::_internal_has_bbox() const {
  return this != internal_default_instance() && _impl_.bbox_ != nullptr;
}
inline bool SerializedNode::has_bbox() const {
  return _internal_has_bbox();
}
inline void SerializedNode::clear_bbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.bbox_ != nullptr) {
    delete _impl_.bbox_;
  }
  _impl_.bbox_ = nullptr;
}
inline const ::SerializedBBox2& SerializedNode::_internal_bbox() const {
  const ::SerializedBBox2* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedBBox2&>(
      ::_SerializedBBox2_default_instance_);
}
inline const ::SerializedBBox2& SerializedNode::bbox() const {
  // @@protoc_insertion_point(field_get:SerializedNode.bbox)
  return _internal_bbox();
}
inline void SerializedNode::unsafe_arena_set_allocated_bbox(
    ::SerializedBBox2* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedNode.bbox)
}
inline ::SerializedBBox2* SerializedNode::release_bbox() {
  
  ::SerializedBBox2* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedBBox2* SerializedNode::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:SerializedNode.bbox)
  
  ::SerializedBBox2* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::SerializedBBox2* SerializedNode::_internal_mutable_bbox() {
  
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedBBox2>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::SerializedBBox2* SerializedNode::mutable_bbox() {
  ::SerializedBBox2* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:SerializedNode.bbox)
  return _msg;
}
inline void SerializedNode::set_allocated_bbox(::SerializedBBox2* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bbox_;
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bbox);
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:SerializedNode.bbox)
}

// -------------------------------------------------------------------

// SerializedGraph

// repeated .SerializedNode node = 1;
inline int SerializedGraph::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int SerializedGraph::node_size() const {
  return _internal_node_size();
}
inline void SerializedGraph::clear_node() {
  _impl_.node_.Clear();
}
inline ::SerializedNode* SerializedGraph::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedGraph.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedNode >*
SerializedGraph::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:SerializedGraph.node)
  return &_impl_.node_;
}
inline const ::SerializedNode& SerializedGraph::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::SerializedNode& SerializedGraph::node(int index) const {
  // @@protoc_insertion_point(field_get:SerializedGraph.node)
  return _internal_node(index);
}
inline ::SerializedNode* SerializedGraph::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::SerializedNode* SerializedGraph::add_node() {
  ::SerializedNode* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:SerializedGraph.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedNode >&
SerializedGraph::node() const {
  // @@protoc_insertion_point(field_list:SerializedGraph.node)
  return _impl_.node_;
}

// -------------------------------------------------------------------

// SerializedGraphArray

// repeated .SerializedGraph graph = 1;
inline int SerializedGraphArray::_internal_graph_size() const {
  return _impl_.graph_.size();
}
inline int SerializedGraphArray::graph_size() const {
  return _internal_graph_size();
}
inline void SerializedGraphArray::clear_graph() {
  _impl_.graph_.Clear();
}
inline ::SerializedGraph* SerializedGraphArray::mutable_graph(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedGraphArray.graph)
  return _impl_.graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedGraph >*
SerializedGraphArray::mutable_graph() {
  // @@protoc_insertion_point(field_mutable_list:SerializedGraphArray.graph)
  return &_impl_.graph_;
}
inline const ::SerializedGraph& SerializedGraphArray::_internal_graph(int index) const {
  return _impl_.graph_.Get(index);
}
inline const ::SerializedGraph& SerializedGraphArray::graph(int index) const {
  // @@protoc_insertion_point(field_get:SerializedGraphArray.graph)
  return _internal_graph(index);
}
inline ::SerializedGraph* SerializedGraphArray::_internal_add_graph() {
  return _impl_.graph_.Add();
}
inline ::SerializedGraph* SerializedGraphArray::add_graph() {
  ::SerializedGraph* _add = _internal_add_graph();
  // @@protoc_insertion_point(field_add:SerializedGraphArray.graph)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedGraph >&
SerializedGraphArray::graph() const {
  // @@protoc_insertion_point(field_list:SerializedGraphArray.graph)
  return _impl_.graph_;
}

// -------------------------------------------------------------------

// SerializedObjectTrack

// uint32 id = 1;
inline void SerializedObjectTrack::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t SerializedObjectTrack::id() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.id)
  return _internal_id();
}
inline void SerializedObjectTrack::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void SerializedObjectTrack::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.id)
}

// uint32 cat = 2;
inline void SerializedObjectTrack::clear_cat() {
  _impl_.cat_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_cat() const {
  return _impl_.cat_;
}
inline uint32_t SerializedObjectTrack::cat() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.cat)
  return _internal_cat();
}
inline void SerializedObjectTrack::_internal_set_cat(uint32_t value) {
  
  _impl_.cat_ = value;
}
inline void SerializedObjectTrack::set_cat(uint32_t value) {
  _internal_set_cat(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.cat)
}

// uint32 last_frame_id = 3;
inline void SerializedObjectTrack::clear_last_frame_id() {
  _impl_.last_frame_id_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_last_frame_id() const {
  return _impl_.last_frame_id_;
}
inline uint32_t SerializedObjectTrack::last_frame_id() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.last_frame_id)
  return _internal_last_frame_id();
}
inline void SerializedObjectTrack::_internal_set_last_frame_id(uint32_t value) {
  
  _impl_.last_frame_id_ = value;
}
inline void SerializedObjectTrack::set_last_frame_id(uint32_t value) {
  _internal_set_last_frame_id(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.last_frame_id)
}

// uint32 color_r = 4;
inline void SerializedObjectTrack::clear_color_r() {
  _impl_.color_r_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_color_r() const {
  return _impl_.color_r_;
}
inline uint32_t SerializedObjectTrack::color_r() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.color_r)
  return _internal_color_r();
}
inline void SerializedObjectTrack::_internal_set_color_r(uint32_t value) {
  
  _impl_.color_r_ = value;
}
inline void SerializedObjectTrack::set_color_r(uint32_t value) {
  _internal_set_color_r(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.color_r)
}

// uint32 color_g = 5;
inline void SerializedObjectTrack::clear_color_g() {
  _impl_.color_g_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_color_g() const {
  return _impl_.color_g_;
}
inline uint32_t SerializedObjectTrack::color_g() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.color_g)
  return _internal_color_g();
}
inline void SerializedObjectTrack::_internal_set_color_g(uint32_t value) {
  
  _impl_.color_g_ = value;
}
inline void SerializedObjectTrack::set_color_g(uint32_t value) {
  _internal_set_color_g(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.color_g)
}

// uint32 color_b = 6;
inline void SerializedObjectTrack::clear_color_b() {
  _impl_.color_b_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_color_b() const {
  return _impl_.color_b_;
}
inline uint32_t SerializedObjectTrack::color_b() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.color_b)
  return _internal_color_b();
}
inline void SerializedObjectTrack::_internal_set_color_b(uint32_t value) {
  
  _impl_.color_b_ = value;
}
inline void SerializedObjectTrack::set_color_b(uint32_t value) {
  _internal_set_color_b(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.color_b)
}

// uint32 status = 7;
inline void SerializedObjectTrack::clear_status() {
  _impl_.status_ = 0u;
}
inline uint32_t SerializedObjectTrack::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t SerializedObjectTrack::status() const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.status)
  return _internal_status();
}
inline void SerializedObjectTrack::_internal_set_status(uint32_t value) {
  
  _impl_.status_ = value;
}
inline void SerializedObjectTrack::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.status)
}

// repeated .SerializedBBox2 kf_bboxes = 8;
inline int SerializedObjectTrack::_internal_kf_bboxes_size() const {
  return _impl_.kf_bboxes_.size();
}
inline int SerializedObjectTrack::kf_bboxes_size() const {
  return _internal_kf_bboxes_size();
}
inline void SerializedObjectTrack::clear_kf_bboxes() {
  _impl_.kf_bboxes_.Clear();
}
inline ::SerializedBBox2* SerializedObjectTrack::mutable_kf_bboxes(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedObjectTrack.kf_bboxes)
  return _impl_.kf_bboxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedBBox2 >*
SerializedObjectTrack::mutable_kf_bboxes() {
  // @@protoc_insertion_point(field_mutable_list:SerializedObjectTrack.kf_bboxes)
  return &_impl_.kf_bboxes_;
}
inline const ::SerializedBBox2& SerializedObjectTrack::_internal_kf_bboxes(int index) const {
  return _impl_.kf_bboxes_.Get(index);
}
inline const ::SerializedBBox2& SerializedObjectTrack::kf_bboxes(int index) const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.kf_bboxes)
  return _internal_kf_bboxes(index);
}
inline ::SerializedBBox2* SerializedObjectTrack::_internal_add_kf_bboxes() {
  return _impl_.kf_bboxes_.Add();
}
inline ::SerializedBBox2* SerializedObjectTrack::add_kf_bboxes() {
  ::SerializedBBox2* _add = _internal_add_kf_bboxes();
  // @@protoc_insertion_point(field_add:SerializedObjectTrack.kf_bboxes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedBBox2 >&
SerializedObjectTrack::kf_bboxes() const {
  // @@protoc_insertion_point(field_list:SerializedObjectTrack.kf_bboxes)
  return _impl_.kf_bboxes_;
}

// repeated uint32 kf_indices = 9;
inline int SerializedObjectTrack::_internal_kf_indices_size() const {
  return _impl_.kf_indices_.size();
}
inline int SerializedObjectTrack::kf_indices_size() const {
  return _internal_kf_indices_size();
}
inline void SerializedObjectTrack::clear_kf_indices() {
  _impl_.kf_indices_.Clear();
}
inline uint32_t SerializedObjectTrack::_internal_kf_indices(int index) const {
  return _impl_.kf_indices_.Get(index);
}
inline uint32_t SerializedObjectTrack::kf_indices(int index) const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.kf_indices)
  return _internal_kf_indices(index);
}
inline void SerializedObjectTrack::set_kf_indices(int index, uint32_t value) {
  _impl_.kf_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.kf_indices)
}
inline void SerializedObjectTrack::_internal_add_kf_indices(uint32_t value) {
  _impl_.kf_indices_.Add(value);
}
inline void SerializedObjectTrack::add_kf_indices(uint32_t value) {
  _internal_add_kf_indices(value);
  // @@protoc_insertion_point(field_add:SerializedObjectTrack.kf_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedObjectTrack::_internal_kf_indices() const {
  return _impl_.kf_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedObjectTrack::kf_indices() const {
  // @@protoc_insertion_point(field_list:SerializedObjectTrack.kf_indices)
  return _internal_kf_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedObjectTrack::_internal_mutable_kf_indices() {
  return &_impl_.kf_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedObjectTrack::mutable_kf_indices() {
  // @@protoc_insertion_point(field_mutable_list:SerializedObjectTrack.kf_indices)
  return _internal_mutable_kf_indices();
}

// repeated double kf_scores = 10;
inline int SerializedObjectTrack::_internal_kf_scores_size() const {
  return _impl_.kf_scores_.size();
}
inline int SerializedObjectTrack::kf_scores_size() const {
  return _internal_kf_scores_size();
}
inline void SerializedObjectTrack::clear_kf_scores() {
  _impl_.kf_scores_.Clear();
}
inline double SerializedObjectTrack::_internal_kf_scores(int index) const {
  return _impl_.kf_scores_.Get(index);
}
inline double SerializedObjectTrack::kf_scores(int index) const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrack.kf_scores)
  return _internal_kf_scores(index);
}
inline void SerializedObjectTrack::set_kf_scores(int index, double value) {
  _impl_.kf_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedObjectTrack.kf_scores)
}
inline void SerializedObjectTrack::_internal_add_kf_scores(double value) {
  _impl_.kf_scores_.Add(value);
}
inline void SerializedObjectTrack::add_kf_scores(double value) {
  _internal_add_kf_scores(value);
  // @@protoc_insertion_point(field_add:SerializedObjectTrack.kf_scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedObjectTrack::_internal_kf_scores() const {
  return _impl_.kf_scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SerializedObjectTrack::kf_scores() const {
  // @@protoc_insertion_point(field_list:SerializedObjectTrack.kf_scores)
  return _internal_kf_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedObjectTrack::_internal_mutable_kf_scores() {
  return &_impl_.kf_scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SerializedObjectTrack::mutable_kf_scores() {
  // @@protoc_insertion_point(field_mutable_list:SerializedObjectTrack.kf_scores)
  return _internal_mutable_kf_scores();
}

// -------------------------------------------------------------------

// SerializedObjectTrackArray

// repeated .SerializedObjectTrack objecttrack = 1;
inline int SerializedObjectTrackArray::_internal_objecttrack_size() const {
  return _impl_.objecttrack_.size();
}
inline int SerializedObjectTrackArray::objecttrack_size() const {
  return _internal_objecttrack_size();
}
inline void SerializedObjectTrackArray::clear_objecttrack() {
  _impl_.objecttrack_.Clear();
}
inline ::SerializedObjectTrack* SerializedObjectTrackArray::mutable_objecttrack(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedObjectTrackArray.objecttrack)
  return _impl_.objecttrack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObjectTrack >*
SerializedObjectTrackArray::mutable_objecttrack() {
  // @@protoc_insertion_point(field_mutable_list:SerializedObjectTrackArray.objecttrack)
  return &_impl_.objecttrack_;
}
inline const ::SerializedObjectTrack& SerializedObjectTrackArray::_internal_objecttrack(int index) const {
  return _impl_.objecttrack_.Get(index);
}
inline const ::SerializedObjectTrack& SerializedObjectTrackArray::objecttrack(int index) const {
  // @@protoc_insertion_point(field_get:SerializedObjectTrackArray.objecttrack)
  return _internal_objecttrack(index);
}
inline ::SerializedObjectTrack* SerializedObjectTrackArray::_internal_add_objecttrack() {
  return _impl_.objecttrack_.Add();
}
inline ::SerializedObjectTrack* SerializedObjectTrackArray::add_objecttrack() {
  ::SerializedObjectTrack* _add = _internal_add_objecttrack();
  // @@protoc_insertion_point(field_add:SerializedObjectTrackArray.objecttrack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedObjectTrack >&
SerializedObjectTrackArray::objecttrack() const {
  // @@protoc_insertion_point(field_list:SerializedObjectTrackArray.objecttrack)
  return _impl_.objecttrack_;
}

// -------------------------------------------------------------------

// SerializedKeyframe

// uint32 id = 1;
inline void SerializedKeyframe::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t SerializedKeyframe::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t SerializedKeyframe::id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.id)
  return _internal_id();
}
inline void SerializedKeyframe::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void SerializedKeyframe::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.id)
}

// .SerializedPose pose = 2;
inline bool SerializedKeyframe::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool SerializedKeyframe::has_pose() const {
  return _internal_has_pose();
}
inline void SerializedKeyframe::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::SerializedPose& SerializedKeyframe::_internal_pose() const {
  const ::SerializedPose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedPose&>(
      ::_SerializedPose_default_instance_);
}
inline const ::SerializedPose& SerializedKeyframe::pose() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.pose)
  return _internal_pose();
}
inline void SerializedKeyframe::unsafe_arena_set_allocated_pose(
    ::SerializedPose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedKeyframe.pose)
}
inline ::SerializedPose* SerializedKeyframe::release_pose() {
  
  ::SerializedPose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedPose* SerializedKeyframe::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.pose)
  
  ::SerializedPose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::SerializedPose* SerializedKeyframe::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedPose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::SerializedPose* SerializedKeyframe::mutable_pose() {
  ::SerializedPose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.pose)
  return _msg;
}
inline void SerializedKeyframe::set_allocated_pose(::SerializedPose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.pose)
}

// .SerializedK kmatrix = 3;
inline bool SerializedKeyframe::_internal_has_kmatrix() const {
  return this != internal_default_instance() && _impl_.kmatrix_ != nullptr;
}
inline bool SerializedKeyframe::has_kmatrix() const {
  return _internal_has_kmatrix();
}
inline void SerializedKeyframe::clear_kmatrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.kmatrix_ != nullptr) {
    delete _impl_.kmatrix_;
  }
  _impl_.kmatrix_ = nullptr;
}
inline const ::SerializedK& SerializedKeyframe::_internal_kmatrix() const {
  const ::SerializedK* p = _impl_.kmatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedK&>(
      ::_SerializedK_default_instance_);
}
inline const ::SerializedK& SerializedKeyframe::kmatrix() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kmatrix)
  return _internal_kmatrix();
}
inline void SerializedKeyframe::unsafe_arena_set_allocated_kmatrix(
    ::SerializedK* kmatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kmatrix_);
  }
  _impl_.kmatrix_ = kmatrix;
  if (kmatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedKeyframe.kmatrix)
}
inline ::SerializedK* SerializedKeyframe::release_kmatrix() {
  
  ::SerializedK* temp = _impl_.kmatrix_;
  _impl_.kmatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedK* SerializedKeyframe::unsafe_arena_release_kmatrix() {
  // @@protoc_insertion_point(field_release:SerializedKeyframe.kmatrix)
  
  ::SerializedK* temp = _impl_.kmatrix_;
  _impl_.kmatrix_ = nullptr;
  return temp;
}
inline ::SerializedK* SerializedKeyframe::_internal_mutable_kmatrix() {
  
  if (_impl_.kmatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedK>(GetArenaForAllocation());
    _impl_.kmatrix_ = p;
  }
  return _impl_.kmatrix_;
}
inline ::SerializedK* SerializedKeyframe::mutable_kmatrix() {
  ::SerializedK* _msg = _internal_mutable_kmatrix();
  // @@protoc_insertion_point(field_mutable:SerializedKeyframe.kmatrix)
  return _msg;
}
inline void SerializedKeyframe::set_allocated_kmatrix(::SerializedK* kmatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kmatrix_;
  }
  if (kmatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kmatrix);
    if (message_arena != submessage_arena) {
      kmatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kmatrix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kmatrix_ = kmatrix;
  // @@protoc_insertion_point(field_set_allocated:SerializedKeyframe.kmatrix)
}

// uint32 kindex = 4;
inline void SerializedKeyframe::clear_kindex() {
  _impl_.kindex_ = 0u;
}
inline uint32_t SerializedKeyframe::_internal_kindex() const {
  return _impl_.kindex_;
}
inline uint32_t SerializedKeyframe::kindex() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.kindex)
  return _internal_kindex();
}
inline void SerializedKeyframe::_internal_set_kindex(uint32_t value) {
  
  _impl_.kindex_ = value;
}
inline void SerializedKeyframe::set_kindex(uint32_t value) {
  _internal_set_kindex(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.kindex)
}

// repeated uint32 loopedgesids = 5;
inline int SerializedKeyframe::_internal_loopedgesids_size() const {
  return _impl_.loopedgesids_.size();
}
inline int SerializedKeyframe::loopedgesids_size() const {
  return _internal_loopedgesids_size();
}
inline void SerializedKeyframe::clear_loopedgesids() {
  _impl_.loopedgesids_.Clear();
}
inline uint32_t SerializedKeyframe::_internal_loopedgesids(int index) const {
  return _impl_.loopedgesids_.Get(index);
}
inline uint32_t SerializedKeyframe::loopedgesids(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.loopedgesids)
  return _internal_loopedgesids(index);
}
inline void SerializedKeyframe::set_loopedgesids(int index, uint32_t value) {
  _impl_.loopedgesids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.loopedgesids)
}
inline void SerializedKeyframe::_internal_add_loopedgesids(uint32_t value) {
  _impl_.loopedgesids_.Add(value);
}
inline void SerializedKeyframe::add_loopedgesids(uint32_t value) {
  _internal_add_loopedgesids(value);
  // @@protoc_insertion_point(field_add:SerializedKeyframe.loopedgesids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedKeyframe::_internal_loopedgesids() const {
  return _impl_.loopedgesids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SerializedKeyframe::loopedgesids() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframe.loopedgesids)
  return _internal_loopedgesids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedKeyframe::_internal_mutable_loopedgesids() {
  return &_impl_.loopedgesids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SerializedKeyframe::mutable_loopedgesids() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframe.loopedgesids)
  return _internal_mutable_loopedgesids();
}

// double timestamp = 6;
inline void SerializedKeyframe::clear_timestamp() {
  _impl_.timestamp_ = 0;
}
inline double SerializedKeyframe::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double SerializedKeyframe::timestamp() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframe.timestamp)
  return _internal_timestamp();
}
inline void SerializedKeyframe::_internal_set_timestamp(double value) {
  
  _impl_.timestamp_ = value;
}
inline void SerializedKeyframe::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframe.timestamp)
}

// -------------------------------------------------------------------

// SerializedKeyframeArray

// repeated .SerializedKeyframe keyframe = 1;
inline int SerializedKeyframeArray::_internal_keyframe_size() const {
  return _impl_.keyframe_.size();
}
inline int SerializedKeyframeArray::keyframe_size() const {
  return _internal_keyframe_size();
}
inline void SerializedKeyframeArray::clear_keyframe() {
  _impl_.keyframe_.Clear();
}
inline ::SerializedKeyframe* SerializedKeyframeArray::mutable_keyframe(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeArray.keyframe)
  return _impl_.keyframe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >*
SerializedKeyframeArray::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeArray.keyframe)
  return &_impl_.keyframe_;
}
inline const ::SerializedKeyframe& SerializedKeyframeArray::_internal_keyframe(int index) const {
  return _impl_.keyframe_.Get(index);
}
inline const ::SerializedKeyframe& SerializedKeyframeArray::keyframe(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeArray.keyframe)
  return _internal_keyframe(index);
}
inline ::SerializedKeyframe* SerializedKeyframeArray::_internal_add_keyframe() {
  return _impl_.keyframe_.Add();
}
inline ::SerializedKeyframe* SerializedKeyframeArray::add_keyframe() {
  ::SerializedKeyframe* _add = _internal_add_keyframe();
  // @@protoc_insertion_point(field_add:SerializedKeyframeArray.keyframe)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframe >&
SerializedKeyframeArray::keyframe() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeArray.keyframe)
  return _impl_.keyframe_;
}

// -------------------------------------------------------------------

// SerializedFeature

// uint32 mappoint_id = 2;
inline void SerializedFeature::clear_mappoint_id() {
  _impl_.mappoint_id_ = 0u;
}
inline uint32_t SerializedFeature::_internal_mappoint_id() const {
  return _impl_.mappoint_id_;
}
inline uint32_t SerializedFeature::mappoint_id() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.mappoint_id)
  return _internal_mappoint_id();
}
inline void SerializedFeature::_internal_set_mappoint_id(uint32_t value) {
  
  _impl_.mappoint_id_ = value;
}
inline void SerializedFeature::set_mappoint_id(uint32_t value) {
  _internal_set_mappoint_id(value);
  // @@protoc_insertion_point(field_set:SerializedFeature.mappoint_id)
}

// .SerializedKeypoint keypoint = 3;
inline bool SerializedFeature::_internal_has_keypoint() const {
  return this != internal_default_instance() && _impl_.keypoint_ != nullptr;
}
inline bool SerializedFeature::has_keypoint() const {
  return _internal_has_keypoint();
}
inline void SerializedFeature::clear_keypoint() {
  if (GetArenaForAllocation() == nullptr && _impl_.keypoint_ != nullptr) {
    delete _impl_.keypoint_;
  }
  _impl_.keypoint_ = nullptr;
}
inline const ::SerializedKeypoint& SerializedFeature::_internal_keypoint() const {
  const ::SerializedKeypoint* p = _impl_.keypoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedKeypoint&>(
      ::_SerializedKeypoint_default_instance_);
}
inline const ::SerializedKeypoint& SerializedFeature::keypoint() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.keypoint)
  return _internal_keypoint();
}
inline void SerializedFeature::unsafe_arena_set_allocated_keypoint(
    ::SerializedKeypoint* keypoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keypoint_);
  }
  _impl_.keypoint_ = keypoint;
  if (keypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedFeature.keypoint)
}
inline ::SerializedKeypoint* SerializedFeature::release_keypoint() {
  
  ::SerializedKeypoint* temp = _impl_.keypoint_;
  _impl_.keypoint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedKeypoint* SerializedFeature::unsafe_arena_release_keypoint() {
  // @@protoc_insertion_point(field_release:SerializedFeature.keypoint)
  
  ::SerializedKeypoint* temp = _impl_.keypoint_;
  _impl_.keypoint_ = nullptr;
  return temp;
}
inline ::SerializedKeypoint* SerializedFeature::_internal_mutable_keypoint() {
  
  if (_impl_.keypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedKeypoint>(GetArenaForAllocation());
    _impl_.keypoint_ = p;
  }
  return _impl_.keypoint_;
}
inline ::SerializedKeypoint* SerializedFeature::mutable_keypoint() {
  ::SerializedKeypoint* _msg = _internal_mutable_keypoint();
  // @@protoc_insertion_point(field_mutable:SerializedFeature.keypoint)
  return _msg;
}
inline void SerializedFeature::set_allocated_keypoint(::SerializedKeypoint* keypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.keypoint_;
  }
  if (keypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keypoint);
    if (message_arena != submessage_arena) {
      keypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keypoint, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.keypoint_ = keypoint;
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.keypoint)
}

// .SerializedDescriptor briefdescriptor = 4;
inline bool SerializedFeature::_internal_has_briefdescriptor() const {
  return this != internal_default_instance() && _impl_.briefdescriptor_ != nullptr;
}
inline bool SerializedFeature::has_briefdescriptor() const {
  return _internal_has_briefdescriptor();
}
inline void SerializedFeature::clear_briefdescriptor() {
  if (GetArenaForAllocation() == nullptr && _impl_.briefdescriptor_ != nullptr) {
    delete _impl_.briefdescriptor_;
  }
  _impl_.briefdescriptor_ = nullptr;
}
inline const ::SerializedDescriptor& SerializedFeature::_internal_briefdescriptor() const {
  const ::SerializedDescriptor* p = _impl_.briefdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedDescriptor&>(
      ::_SerializedDescriptor_default_instance_);
}
inline const ::SerializedDescriptor& SerializedFeature::briefdescriptor() const {
  // @@protoc_insertion_point(field_get:SerializedFeature.briefdescriptor)
  return _internal_briefdescriptor();
}
inline void SerializedFeature::unsafe_arena_set_allocated_briefdescriptor(
    ::SerializedDescriptor* briefdescriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.briefdescriptor_);
  }
  _impl_.briefdescriptor_ = briefdescriptor;
  if (briefdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SerializedFeature.briefdescriptor)
}
inline ::SerializedDescriptor* SerializedFeature::release_briefdescriptor() {
  
  ::SerializedDescriptor* temp = _impl_.briefdescriptor_;
  _impl_.briefdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SerializedDescriptor* SerializedFeature::unsafe_arena_release_briefdescriptor() {
  // @@protoc_insertion_point(field_release:SerializedFeature.briefdescriptor)
  
  ::SerializedDescriptor* temp = _impl_.briefdescriptor_;
  _impl_.briefdescriptor_ = nullptr;
  return temp;
}
inline ::SerializedDescriptor* SerializedFeature::_internal_mutable_briefdescriptor() {
  
  if (_impl_.briefdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedDescriptor>(GetArenaForAllocation());
    _impl_.briefdescriptor_ = p;
  }
  return _impl_.briefdescriptor_;
}
inline ::SerializedDescriptor* SerializedFeature::mutable_briefdescriptor() {
  ::SerializedDescriptor* _msg = _internal_mutable_briefdescriptor();
  // @@protoc_insertion_point(field_mutable:SerializedFeature.briefdescriptor)
  return _msg;
}
inline void SerializedFeature::set_allocated_briefdescriptor(::SerializedDescriptor* briefdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.briefdescriptor_;
  }
  if (briefdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(briefdescriptor);
    if (message_arena != submessage_arena) {
      briefdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, briefdescriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.briefdescriptor_ = briefdescriptor;
  // @@protoc_insertion_point(field_set_allocated:SerializedFeature.briefdescriptor)
}

// -------------------------------------------------------------------

// SerializedKeyframeFeatures

// uint32 keyframe_id = 1;
inline void SerializedKeyframeFeatures::clear_keyframe_id() {
  _impl_.keyframe_id_ = 0u;
}
inline uint32_t SerializedKeyframeFeatures::_internal_keyframe_id() const {
  return _impl_.keyframe_id_;
}
inline uint32_t SerializedKeyframeFeatures::keyframe_id() const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.keyframe_id)
  return _internal_keyframe_id();
}
inline void SerializedKeyframeFeatures::_internal_set_keyframe_id(uint32_t value) {
  
  _impl_.keyframe_id_ = value;
}
inline void SerializedKeyframeFeatures::set_keyframe_id(uint32_t value) {
  _internal_set_keyframe_id(value);
  // @@protoc_insertion_point(field_set:SerializedKeyframeFeatures.keyframe_id)
}

// repeated .SerializedFeature feature = 2;
inline int SerializedKeyframeFeatures::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int SerializedKeyframeFeatures::feature_size() const {
  return _internal_feature_size();
}
inline void SerializedKeyframeFeatures::clear_feature() {
  _impl_.feature_.Clear();
}
inline ::SerializedFeature* SerializedKeyframeFeatures::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeatures.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >*
SerializedKeyframeFeatures::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeatures.feature)
  return &_impl_.feature_;
}
inline const ::SerializedFeature& SerializedKeyframeFeatures::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::SerializedFeature& SerializedKeyframeFeatures::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeatures.feature)
  return _internal_feature(index);
}
inline ::SerializedFeature* SerializedKeyframeFeatures::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::SerializedFeature* SerializedKeyframeFeatures::add_feature() {
  ::SerializedFeature* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeatures.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedFeature >&
SerializedKeyframeFeatures::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeatures.feature)
  return _impl_.feature_;
}

// -------------------------------------------------------------------

// SerializedKeyframeFeaturesArray

// repeated .SerializedKeyframeFeatures feature = 1;
inline int SerializedKeyframeFeaturesArray::_internal_feature_size() const {
  return _impl_.feature_.size();
}
inline int SerializedKeyframeFeaturesArray::feature_size() const {
  return _internal_feature_size();
}
inline void SerializedKeyframeFeaturesArray::clear_feature() {
  _impl_.feature_.Clear();
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:SerializedKeyframeFeaturesArray.feature)
  return _impl_.feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >*
SerializedKeyframeFeaturesArray::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:SerializedKeyframeFeaturesArray.feature)
  return &_impl_.feature_;
}
inline const ::SerializedKeyframeFeatures& SerializedKeyframeFeaturesArray::_internal_feature(int index) const {
  return _impl_.feature_.Get(index);
}
inline const ::SerializedKeyframeFeatures& SerializedKeyframeFeaturesArray::feature(int index) const {
  // @@protoc_insertion_point(field_get:SerializedKeyframeFeaturesArray.feature)
  return _internal_feature(index);
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::_internal_add_feature() {
  return _impl_.feature_.Add();
}
inline ::SerializedKeyframeFeatures* SerializedKeyframeFeaturesArray::add_feature() {
  ::SerializedKeyframeFeatures* _add = _internal_add_feature();
  // @@protoc_insertion_point(field_add:SerializedKeyframeFeaturesArray.feature)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SerializedKeyframeFeatures >&
SerializedKeyframeFeaturesArray::feature() const {
  // @@protoc_insertion_point(field_list:SerializedKeyframeFeaturesArray.feature)
  return _impl_.feature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osmap_2eproto
